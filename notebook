{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":67079,"databundleVersionId":7452256,"sourceType":"competition"}],"dockerImageVersionId":30646,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Importing general libraries and the dataset","metadata":{}},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import GridSearchCV\nimport matplotlib.pyplot as plt\nimport seaborn as sb\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-04-10T11:13:08.300223Z","iopub.execute_input":"2024-04-10T11:13:08.300828Z","iopub.status.idle":"2024-04-10T11:13:08.314537Z","shell.execute_reply.started":"2024-04-10T11:13:08.300775Z","shell.execute_reply":"2024-04-10T11:13:08.313096Z"},"trusted":true},"execution_count":159,"outputs":[{"name":"stdout","text":"/kaggle/input/recipe-for-rating-predict-food-ratings-using-ml/sample.csv\n/kaggle/input/recipe-for-rating-predict-food-ratings-using-ml/train.csv\n/kaggle/input/recipe-for-rating-predict-food-ratings-using-ml/test.csv\n","output_type":"stream"}]},{"cell_type":"code","source":"train=pd.read_csv('/kaggle/input/recipe-for-rating-predict-food-ratings-using-ml/train.csv')\ntest=pd.read_csv('/kaggle/input/recipe-for-rating-predict-food-ratings-using-ml/test.csv')","metadata":{"execution":{"iopub.status.busy":"2024-04-10T11:13:08.317194Z","iopub.execute_input":"2024-04-10T11:13:08.317546Z","iopub.status.idle":"2024-04-10T11:13:08.462913Z","shell.execute_reply.started":"2024-04-10T11:13:08.317517Z","shell.execute_reply":"2024-04-10T11:13:08.461758Z"},"trusted":true},"execution_count":160,"outputs":[]},{"cell_type":"markdown","source":"# Understanding the Data","metadata":{}},{"cell_type":"code","source":"print(train.shape)\nprint(test.shape)","metadata":{"execution":{"iopub.status.busy":"2024-04-10T11:13:08.464755Z","iopub.execute_input":"2024-04-10T11:13:08.465100Z","iopub.status.idle":"2024-04-10T11:13:08.471057Z","shell.execute_reply.started":"2024-04-10T11:13:08.465072Z","shell.execute_reply":"2024-04-10T11:13:08.469995Z"},"trusted":true},"execution_count":161,"outputs":[{"name":"stdout","text":"(13636, 15)\n(4546, 14)\n","output_type":"stream"}]},{"cell_type":"code","source":"train.head(5)","metadata":{"execution":{"iopub.status.busy":"2024-04-10T11:13:08.472595Z","iopub.execute_input":"2024-04-10T11:13:08.472986Z","iopub.status.idle":"2024-04-10T11:13:08.500085Z","shell.execute_reply.started":"2024-04-10T11:13:08.472956Z","shell.execute_reply":"2024-04-10T11:13:08.498116Z"},"trusted":true},"execution_count":162,"outputs":[{"execution_count":162,"output_type":"execute_result","data":{"text/plain":"    ID  RecipeNumber  RecipeCode                              RecipeName  \\\n0   70            71       12259  Banana Bars with Cream Cheese Frosting   \n1   72            88        8202                        Simple Taco Soup   \n2  458             3        2832                       Cheeseburger Soup   \n3    7            50      100276               Grilled Huli Huli Chicken   \n4   60            12       19731                        Cauliflower Soup   \n\n                     CommentID                         UserID        UserName  \\\n0   sp_aUSaElGf_12259_c_149978  u_1oKVaBmiEKwAFyiHrDLoWpbel0J   misscoffeepot   \n1    sp_aUSaElGf_8202_c_310332  u_1oKZeRIXYzGNhGW8OMR3O4lX1ih  MichelleMalone   \n2    sp_aUSaElGf_2832_c_206522  u_1oKYHUtdaD48KJCDYq5wfpAUxWz       jeannem32   \n3  sp_aUSaElGf_100276_c_434088  u_1oKZCQcKQZdQhDVBS7oISc216VA           ds422   \n4   sp_aUSaElGf_19731_c_387011  u_1oKd4sudZQPgu6YALiC7bW7mKMs     SusanHoward   \n\n   UserReputation  CreationTimestamp  ReplyCount  ThumbsUpCount  \\\n0              20         1622717078           0              0   \n1               1         1622717852           0              0   \n2               1         1622717357           0              0   \n3               1         1622648899           0              0   \n4               1         1622718260           0              0   \n\n   ThumbsDownCount  Rating  BestScore  \\\n0                0       5        100   \n1                1       5        100   \n2                0       3        100   \n3                0       5        100   \n4                0       4        100   \n\n                                       Recipe_Review  \n0  great recipe! I have made them just as written...  \n1  This is an easy and quick recipe that is great...  \n2  I think I was looking for something extra spec...  \n3  This is our favorite grilled chicken recipe.  ...  \n4  Great basic recipe. I added 2 teaspoons Tuscan...  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ID</th>\n      <th>RecipeNumber</th>\n      <th>RecipeCode</th>\n      <th>RecipeName</th>\n      <th>CommentID</th>\n      <th>UserID</th>\n      <th>UserName</th>\n      <th>UserReputation</th>\n      <th>CreationTimestamp</th>\n      <th>ReplyCount</th>\n      <th>ThumbsUpCount</th>\n      <th>ThumbsDownCount</th>\n      <th>Rating</th>\n      <th>BestScore</th>\n      <th>Recipe_Review</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>70</td>\n      <td>71</td>\n      <td>12259</td>\n      <td>Banana Bars with Cream Cheese Frosting</td>\n      <td>sp_aUSaElGf_12259_c_149978</td>\n      <td>u_1oKVaBmiEKwAFyiHrDLoWpbel0J</td>\n      <td>misscoffeepot</td>\n      <td>20</td>\n      <td>1622717078</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>5</td>\n      <td>100</td>\n      <td>great recipe! I have made them just as written...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>72</td>\n      <td>88</td>\n      <td>8202</td>\n      <td>Simple Taco Soup</td>\n      <td>sp_aUSaElGf_8202_c_310332</td>\n      <td>u_1oKZeRIXYzGNhGW8OMR3O4lX1ih</td>\n      <td>MichelleMalone</td>\n      <td>1</td>\n      <td>1622717852</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>5</td>\n      <td>100</td>\n      <td>This is an easy and quick recipe that is great...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>458</td>\n      <td>3</td>\n      <td>2832</td>\n      <td>Cheeseburger Soup</td>\n      <td>sp_aUSaElGf_2832_c_206522</td>\n      <td>u_1oKYHUtdaD48KJCDYq5wfpAUxWz</td>\n      <td>jeannem32</td>\n      <td>1</td>\n      <td>1622717357</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>3</td>\n      <td>100</td>\n      <td>I think I was looking for something extra spec...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>7</td>\n      <td>50</td>\n      <td>100276</td>\n      <td>Grilled Huli Huli Chicken</td>\n      <td>sp_aUSaElGf_100276_c_434088</td>\n      <td>u_1oKZCQcKQZdQhDVBS7oISc216VA</td>\n      <td>ds422</td>\n      <td>1</td>\n      <td>1622648899</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>5</td>\n      <td>100</td>\n      <td>This is our favorite grilled chicken recipe.  ...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>60</td>\n      <td>12</td>\n      <td>19731</td>\n      <td>Cauliflower Soup</td>\n      <td>sp_aUSaElGf_19731_c_387011</td>\n      <td>u_1oKd4sudZQPgu6YALiC7bW7mKMs</td>\n      <td>SusanHoward</td>\n      <td>1</td>\n      <td>1622718260</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>4</td>\n      <td>100</td>\n      <td>Great basic recipe. I added 2 teaspoons Tuscan...</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"train.dtypes","metadata":{"execution":{"iopub.status.busy":"2024-04-10T11:13:08.506007Z","iopub.execute_input":"2024-04-10T11:13:08.506841Z","iopub.status.idle":"2024-04-10T11:13:08.515770Z","shell.execute_reply.started":"2024-04-10T11:13:08.506804Z","shell.execute_reply":"2024-04-10T11:13:08.514433Z"},"trusted":true},"execution_count":163,"outputs":[{"execution_count":163,"output_type":"execute_result","data":{"text/plain":"ID                    int64\nRecipeNumber          int64\nRecipeCode            int64\nRecipeName           object\nCommentID            object\nUserID               object\nUserName             object\nUserReputation        int64\nCreationTimestamp     int64\nReplyCount            int64\nThumbsUpCount         int64\nThumbsDownCount       int64\nRating                int64\nBestScore             int64\nRecipe_Review        object\ndtype: object"},"metadata":{}}]},{"cell_type":"code","source":"print(train.columns)","metadata":{"execution":{"iopub.status.busy":"2024-04-10T11:13:08.517253Z","iopub.execute_input":"2024-04-10T11:13:08.517775Z","iopub.status.idle":"2024-04-10T11:13:08.527862Z","shell.execute_reply.started":"2024-04-10T11:13:08.517744Z","shell.execute_reply":"2024-04-10T11:13:08.526587Z"},"trusted":true},"execution_count":164,"outputs":[{"name":"stdout","text":"Index(['ID', 'RecipeNumber', 'RecipeCode', 'RecipeName', 'CommentID', 'UserID',\n       'UserName', 'UserReputation', 'CreationTimestamp', 'ReplyCount',\n       'ThumbsUpCount', 'ThumbsDownCount', 'Rating', 'BestScore',\n       'Recipe_Review'],\n      dtype='object')\n","output_type":"stream"}]},{"cell_type":"code","source":"print(train.isna().sum())","metadata":{"execution":{"iopub.status.busy":"2024-04-10T11:13:08.529451Z","iopub.execute_input":"2024-04-10T11:13:08.530034Z","iopub.status.idle":"2024-04-10T11:13:08.549912Z","shell.execute_reply.started":"2024-04-10T11:13:08.530002Z","shell.execute_reply":"2024-04-10T11:13:08.548762Z"},"trusted":true},"execution_count":165,"outputs":[{"name":"stdout","text":"ID                   0\nRecipeNumber         0\nRecipeCode           0\nRecipeName           0\nCommentID            0\nUserID               0\nUserName             0\nUserReputation       0\nCreationTimestamp    0\nReplyCount           0\nThumbsUpCount        0\nThumbsDownCount      0\nRating               0\nBestScore            0\nRecipe_Review        2\ndtype: int64\n","output_type":"stream"}]},{"cell_type":"markdown","source":"### Since there are only 2 null values in the entire dataset having 13636 rows, and that to for a textual column, dropping these rows won't affect our findings","metadata":{}},{"cell_type":"code","source":"train=train.dropna()","metadata":{"execution":{"iopub.status.busy":"2024-04-10T11:13:08.553403Z","iopub.execute_input":"2024-04-10T11:13:08.553777Z","iopub.status.idle":"2024-04-10T11:13:08.572352Z","shell.execute_reply.started":"2024-04-10T11:13:08.553746Z","shell.execute_reply":"2024-04-10T11:13:08.571165Z"},"trusted":true},"execution_count":166,"outputs":[]},{"cell_type":"code","source":"print(len(train['UserID'].value_counts()))","metadata":{"execution":{"iopub.status.busy":"2024-04-10T11:13:08.573604Z","iopub.execute_input":"2024-04-10T11:13:08.574610Z","iopub.status.idle":"2024-04-10T11:13:08.591494Z","shell.execute_reply.started":"2024-04-10T11:13:08.574579Z","shell.execute_reply":"2024-04-10T11:13:08.590324Z"},"trusted":true},"execution_count":167,"outputs":[{"name":"stdout","text":"10782\n","output_type":"stream"}]},{"cell_type":"code","source":"train['RecipeNumber'].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-04-10T11:13:08.592983Z","iopub.execute_input":"2024-04-10T11:13:08.593375Z","iopub.status.idle":"2024-04-10T11:13:08.608405Z","shell.execute_reply.started":"2024-04-10T11:13:08.593345Z","shell.execute_reply":"2024-04-10T11:13:08.607265Z"},"trusted":true},"execution_count":168,"outputs":[{"execution_count":168,"output_type":"execute_result","data":{"text/plain":"RecipeNumber\n3     552\n1     483\n2     372\n9     313\n13    307\n     ... \n54     68\n97     65\n91     64\n72     64\n61     19\nName: count, Length: 100, dtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"print(len(train['CreationTimestamp'].value_counts()))","metadata":{"execution":{"iopub.status.busy":"2024-04-10T11:13:08.609866Z","iopub.execute_input":"2024-04-10T11:13:08.610202Z","iopub.status.idle":"2024-04-10T11:13:08.620609Z","shell.execute_reply.started":"2024-04-10T11:13:08.610174Z","shell.execute_reply":"2024-04-10T11:13:08.619471Z"},"trusted":true},"execution_count":169,"outputs":[{"name":"stdout","text":"2422\n","output_type":"stream"}]},{"cell_type":"code","source":"plt.figure(figsize=(8, 6))\ntrain['RecipeNumber'].value_counts().plot(kind='bar', color='skyblue').tick_params(axis='x', labelsize=4)\n# plt.title('Ratings')\nplt.xlabel('Recipe Number')\nplt.ylabel('Count')\n\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-04-10T11:13:08.621832Z","iopub.execute_input":"2024-04-10T11:13:08.622150Z","iopub.status.idle":"2024-04-10T11:13:09.462576Z","shell.execute_reply.started":"2024-04-10T11:13:08.622123Z","shell.execute_reply":"2024-04-10T11:13:09.461524Z"},"trusted":true},"execution_count":170,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 800x600 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"### From the bar , we see the RecipeNumber 3 is the most reviewed recipe among all 100 recipes, followed by 1,2 and so on....","metadata":{}},{"cell_type":"code","source":"print(train[train['Rating'] == 0].head(10))","metadata":{"execution":{"iopub.status.busy":"2024-04-10T11:13:09.464063Z","iopub.execute_input":"2024-04-10T11:13:09.464414Z","iopub.status.idle":"2024-04-10T11:13:09.481408Z","shell.execute_reply.started":"2024-04-10T11:13:09.464385Z","shell.execute_reply":"2024-04-10T11:13:09.480511Z"},"trusted":true},"execution_count":171,"outputs":[{"name":"stdout","text":"     ID  RecipeNumber  RecipeCode                                RecipeName  \\\n10   22            86        4383             First-Place Coconut Macaroons   \n17   44            67       16579                    Chicken Wild Rice Soup   \n20  351             1       14299                        Creamy White Chili   \n23    4            63       24886                     Chicken and Dumplings   \n24   53            89        1324                       Porcupine Meatballs   \n27  251            14        7178                          Zucchini Cupcake   \n31  134            73       41095  Contest-Winning New England Clam Chowder   \n43   23             1       14299                        Creamy White Chili   \n57   73            84        4444                  Strawberry Pretzel Salad   \n89   79            75       38183                             Baked Tilapia   \n\n                                          CommentID  \\\n10                        sp_aUSaElGf_4383_c_428585   \n17                       sp_aUSaElGf_16579_c_222325   \n20                       sp_aUSaElGf_14299_c_202413   \n23                       sp_aUSaElGf_24886_c_432881   \n24                        sp_aUSaElGf_1324_c_397111   \n27                        sp_aUSaElGf_7178_c_268498   \n31                       sp_aUSaElGf_41095_c_346384   \n43  sp_aUSaElGf_14299_c_1vFabyuTl4d81ivTsJDdxKOnb0c   \n57                        sp_aUSaElGf_4444_c_162568   \n89                       sp_aUSaElGf_38183_c_242692   \n\n                           UserID                UserName  UserReputation  \\\n10  u_1oKdAmzMcvgeZbaOUWAQ2v2UBqG                   Linda               1   \n17  u_1oKWRRsonxQY8Z21nlsVF7lRgbK         OzarkMeatSmoker               1   \n20  u_1oKXGJZkhzCAgJ5nXjYque9wh5D                  crene3               1   \n23  u_1oKYTN09x2Oxs2tNxizubh3t3ht           Kim Mallicoat               1   \n24  u_1oKd0xe4WRgi4ggGdgpdP5WARjj  MaryOstrander-Crawford               1   \n27  u_1oKVxaz56wrkMuS7Jt2KUcXnqKG                  ppeart               1   \n31  u_1oKc4ATXUtGjh6jS6i6zmAgdb8M                 DorineM               1   \n43                 u_PbmqE1O8NisP               Carole368               1   \n57  u_1oKXJcoGHeirb6iS3E6SB8DuSRQ          VirginiaStrine               1   \n89  u_1oKXWf1PIJiDijaw11bZig96ezC                 herling               1   \n\n    CreationTimestamp  ReplyCount  ThumbsUpCount  ThumbsDownCount  Rating  \\\n10         1622648880           0              3               10       0   \n17         1622717443           0              1                0       0   \n20         1622717309           0              0                0       0   \n23         1622648873           0             23                0       0   \n24         1622718320           0              0                0       0   \n27         1622717666           0              0                0       0   \n31         1622718056           0              0                0       0   \n43         1626160365           1              5               29       0   \n57         1622717124           0              0                0       0   \n89         1622717534           0              0                0       0   \n\n    BestScore                                      Recipe_Review  \n10        136  I made this. ..something wrong with this recip...  \n17        193  I&#39;m going to try this, bet it is good. Liv...  \n20        100  I omitted the green chilis, and I loved it.  A...  \n23        485  At end of instructions, I felt it necessary to...  \n24        100  I make them all the time only I have been taug...  \n27        100  re: zucchini cupcakes---these are so moist and...  \n31        100  To Pickup2....I almost fainted when she asked ...  \n43        530  This is just White Chicken Chili with I first ...  \n57        100  I can&#39;t find frozen strawberries that are ...  \n89        100  Made this last night.  My husband isn&#39;t a ...  \n","output_type":"stream"}]},{"cell_type":"code","source":"plt.figure(figsize=(8, 6))\ntrain['Rating'].value_counts().plot(kind='bar', color='seagreen').tick_params(axis='x', labelsize=8)\n# plt.title('Ratings')\nplt.xlabel('Ratings')\nplt.ylabel('Count')\n\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-04-10T11:13:09.486427Z","iopub.execute_input":"2024-04-10T11:13:09.486959Z","iopub.status.idle":"2024-04-10T11:13:09.674998Z","shell.execute_reply.started":"2024-04-10T11:13:09.486928Z","shell.execute_reply":"2024-04-10T11:13:09.674118Z"},"trusted":true},"execution_count":172,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 800x600 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"### From the Bar graph, we see the clear distinction in the frequency of ratings. Most of the Recipe ratings have a value of 5","metadata":{}},{"cell_type":"markdown","source":"### Hence the data is clearly Imbalanced","metadata":{}},{"cell_type":"markdown","source":"## Finding Correlation between various numerical features of the matrix","metadata":{}},{"cell_type":"code","source":"numerical_train = train.iloc[:,[1,7,8,9,10,11,12,13]]\nprint(numerical_train.head(5))","metadata":{"execution":{"iopub.status.busy":"2024-04-10T11:13:09.676507Z","iopub.execute_input":"2024-04-10T11:13:09.677009Z","iopub.status.idle":"2024-04-10T11:13:09.686852Z","shell.execute_reply.started":"2024-04-10T11:13:09.676973Z","shell.execute_reply":"2024-04-10T11:13:09.685719Z"},"trusted":true},"execution_count":173,"outputs":[{"name":"stdout","text":"   RecipeNumber  UserReputation  CreationTimestamp  ReplyCount  ThumbsUpCount  \\\n0            71              20         1622717078           0              0   \n1            88               1         1622717852           0              0   \n2             3               1         1622717357           0              0   \n3            50               1         1622648899           0              0   \n4            12               1         1622718260           0              0   \n\n   ThumbsDownCount  Rating  BestScore  \n0                0       5        100  \n1                1       5        100  \n2                0       3        100  \n3                0       5        100  \n4                0       4        100  \n","output_type":"stream"}]},{"cell_type":"code","source":"dataplot = sb.heatmap(numerical_train.corr(), cmap=\"Greens\", annot=True) ","metadata":{"execution":{"iopub.status.busy":"2024-04-10T11:13:09.688252Z","iopub.execute_input":"2024-04-10T11:13:09.688580Z","iopub.status.idle":"2024-04-10T11:13:10.267511Z","shell.execute_reply.started":"2024-04-10T11:13:09.688552Z","shell.execute_reply":"2024-04-10T11:13:10.265960Z"},"trusted":true},"execution_count":174,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 2 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"## From the Heatmap we can note the following insights:\n### 1. Most of the feature don't have strong correlation between them\n### 2. Best Score has a strong correlation with CreationTimestamp and ThumbsUpCount\n### 3. Ratings has a positive correlation only with UserReputation","metadata":{}},{"cell_type":"markdown","source":"# Balancing The Dataset","metadata":{}},{"cell_type":"code","source":"# # Assuming df is your imbalanced DataFrame with a column 'target' indicating the class\n# from sklearn.utils import resample\n\n# # Separate majority and minority classes\n# majority_class = train[train['Rating'] == 5]\n# minority_class = train[train['Rating'].isin([0,1,2,3,4])]\n\n# # Downsample majority class\n# majority_downsampled = resample(majority_class,\n#                                 replace=False,  # Sample without replacement\n#                                 n_samples=len(minority_class),  # to match minority class\n#                                 random_state=42)  # reproducible results\n\n# # Combine minority class with downsampled majority class\n# balanced_df = pd.concat([majority_downsampled, minority_class])\n\n# # Shuffle rows to mix the classes\n# balanced_df = balanced_df.sample(frac=1, random_state=42)\n","metadata":{"execution":{"iopub.status.busy":"2024-04-10T11:13:10.269021Z","iopub.execute_input":"2024-04-10T11:13:10.269350Z","iopub.status.idle":"2024-04-10T11:13:10.275452Z","shell.execute_reply.started":"2024-04-10T11:13:10.269316Z","shell.execute_reply":"2024-04-10T11:13:10.274340Z"},"trusted":true},"execution_count":175,"outputs":[]},{"cell_type":"markdown","source":"# Data pre-processing","metadata":{}},{"cell_type":"code","source":"X,y=train.iloc[:,[1,7,8,9,10,11,13,14]],train.iloc[:,12]\nprint(X.head(5))\nprint(y.head(5))","metadata":{"execution":{"iopub.status.busy":"2024-04-10T11:13:10.276927Z","iopub.execute_input":"2024-04-10T11:13:10.277392Z","iopub.status.idle":"2024-04-10T11:13:10.291805Z","shell.execute_reply.started":"2024-04-10T11:13:10.277361Z","shell.execute_reply":"2024-04-10T11:13:10.290707Z"},"trusted":true},"execution_count":176,"outputs":[{"name":"stdout","text":"   RecipeNumber  UserReputation  CreationTimestamp  ReplyCount  ThumbsUpCount  \\\n0            71              20         1622717078           0              0   \n1            88               1         1622717852           0              0   \n2             3               1         1622717357           0              0   \n3            50               1         1622648899           0              0   \n4            12               1         1622718260           0              0   \n\n   ThumbsDownCount  BestScore  \\\n0                0        100   \n1                1        100   \n2                0        100   \n3                0        100   \n4                0        100   \n\n                                       Recipe_Review  \n0  great recipe! I have made them just as written...  \n1  This is an easy and quick recipe that is great...  \n2  I think I was looking for something extra spec...  \n3  This is our favorite grilled chicken recipe.  ...  \n4  Great basic recipe. I added 2 teaspoons Tuscan...  \n0    5\n1    5\n2    3\n3    5\n4    4\nName: Rating, dtype: int64\n","output_type":"stream"}]},{"cell_type":"code","source":"print(X.shape)","metadata":{"execution":{"iopub.status.busy":"2024-04-10T11:13:10.293117Z","iopub.execute_input":"2024-04-10T11:13:10.293509Z","iopub.status.idle":"2024-04-10T11:13:10.301395Z","shell.execute_reply.started":"2024-04-10T11:13:10.293479Z","shell.execute_reply":"2024-04-10T11:13:10.300292Z"},"trusted":true},"execution_count":177,"outputs":[{"name":"stdout","text":"(13634, 8)\n","output_type":"stream"}]},{"cell_type":"code","source":"print(y.value_counts())","metadata":{"execution":{"iopub.status.busy":"2024-04-10T11:13:10.303098Z","iopub.execute_input":"2024-04-10T11:13:10.303450Z","iopub.status.idle":"2024-04-10T11:13:10.313467Z","shell.execute_reply.started":"2024-04-10T11:13:10.303422Z","shell.execute_reply":"2024-04-10T11:13:10.312468Z"},"trusted":true},"execution_count":178,"outputs":[{"name":"stdout","text":"Rating\n5    10369\n0     1272\n4     1241\n3      368\n1      210\n2      174\nName: count, dtype: int64\n","output_type":"stream"}]},{"cell_type":"code","source":"X.isna().sum()","metadata":{"execution":{"iopub.status.busy":"2024-04-10T11:13:10.314945Z","iopub.execute_input":"2024-04-10T11:13:10.315312Z","iopub.status.idle":"2024-04-10T11:13:10.329855Z","shell.execute_reply.started":"2024-04-10T11:13:10.315273Z","shell.execute_reply":"2024-04-10T11:13:10.328920Z"},"trusted":true},"execution_count":179,"outputs":[{"execution_count":179,"output_type":"execute_result","data":{"text/plain":"RecipeNumber         0\nUserReputation       0\nCreationTimestamp    0\nReplyCount           0\nThumbsUpCount        0\nThumbsDownCount      0\nBestScore            0\nRecipe_Review        0\ndtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"y.isna().sum()","metadata":{"execution":{"iopub.status.busy":"2024-04-10T11:13:10.331306Z","iopub.execute_input":"2024-04-10T11:13:10.331844Z","iopub.status.idle":"2024-04-10T11:13:10.341925Z","shell.execute_reply.started":"2024-04-10T11:13:10.331815Z","shell.execute_reply":"2024-04-10T11:13:10.340789Z"},"trusted":true},"execution_count":180,"outputs":[{"execution_count":180,"output_type":"execute_result","data":{"text/plain":"0"},"metadata":{}}]},{"cell_type":"code","source":"from sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import OneHotEncoder, StandardScaler, FunctionTransformer\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.pipeline import Pipeline","metadata":{"execution":{"iopub.status.busy":"2024-04-10T11:13:10.343746Z","iopub.execute_input":"2024-04-10T11:13:10.344166Z","iopub.status.idle":"2024-04-10T11:13:10.350916Z","shell.execute_reply.started":"2024-04-10T11:13:10.344127Z","shell.execute_reply":"2024-04-10T11:13:10.349502Z"},"trusted":true},"execution_count":181,"outputs":[]},{"cell_type":"code","source":"steps = [\n    ('tfidf',TfidfVectorizer(stop_words='english')),\n    ('to_array',FunctionTransformer(lambda x: x.toarray(), accept_sparse=True))\n]\ntext_pipeline = Pipeline(steps=steps)","metadata":{"execution":{"iopub.status.busy":"2024-04-10T11:13:10.354310Z","iopub.execute_input":"2024-04-10T11:13:10.354744Z","iopub.status.idle":"2024-04-10T11:13:10.364154Z","shell.execute_reply.started":"2024-04-10T11:13:10.354712Z","shell.execute_reply":"2024-04-10T11:13:10.363144Z"},"trusted":true},"execution_count":182,"outputs":[]},{"cell_type":"code","source":"tfidf_op = text_pipeline.fit_transform(X['Recipe_Review'])\nprint(tfidf_op.shape)","metadata":{"execution":{"iopub.status.busy":"2024-04-10T11:13:10.366349Z","iopub.execute_input":"2024-04-10T11:13:10.366687Z","iopub.status.idle":"2024-04-10T11:13:11.814918Z","shell.execute_reply.started":"2024-04-10T11:13:10.366642Z","shell.execute_reply":"2024-04-10T11:13:11.813595Z"},"trusted":true},"execution_count":183,"outputs":[{"name":"stdout","text":"(13634, 10194)\n","output_type":"stream"}]},{"cell_type":"code","source":"transform = ColumnTransformer(\ntransformers=[\n    ('numeric',StandardScaler(),[1,2,3,4,5,6]),\n    ('categorical',OneHotEncoder(),[0]),\n\n]\n)\n\nX_scaled=transform.fit_transform(X)","metadata":{"execution":{"iopub.status.busy":"2024-04-10T11:13:11.816455Z","iopub.execute_input":"2024-04-10T11:13:11.816912Z","iopub.status.idle":"2024-04-10T11:13:11.841735Z","shell.execute_reply.started":"2024-04-10T11:13:11.816872Z","shell.execute_reply":"2024-04-10T11:13:11.840537Z"},"trusted":true},"execution_count":184,"outputs":[]},{"cell_type":"code","source":"X_scaled=X_scaled.toarray()\nprint(X_scaled.shape)","metadata":{"execution":{"iopub.status.busy":"2024-04-10T11:13:11.843087Z","iopub.execute_input":"2024-04-10T11:13:11.843423Z","iopub.status.idle":"2024-04-10T11:13:11.850913Z","shell.execute_reply.started":"2024-04-10T11:13:11.843393Z","shell.execute_reply":"2024-04-10T11:13:11.849535Z"},"trusted":true},"execution_count":185,"outputs":[{"name":"stdout","text":"(13634, 106)\n","output_type":"stream"}]},{"cell_type":"code","source":"X_final = np.concatenate((X_scaled,tfidf_op),1)\nprint(X_final.shape)","metadata":{"execution":{"iopub.status.busy":"2024-04-10T11:13:11.852607Z","iopub.execute_input":"2024-04-10T11:13:11.853816Z","iopub.status.idle":"2024-04-10T11:13:12.528352Z","shell.execute_reply.started":"2024-04-10T11:13:11.853774Z","shell.execute_reply":"2024-04-10T11:13:12.527204Z"},"trusted":true},"execution_count":186,"outputs":[{"name":"stdout","text":"(13634, 10300)\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Feature Extraction","metadata":{}},{"cell_type":"markdown","source":"* After preprocessing the data, each row has 10,300 features.\n* Train models on this feature matrix will take alot of time and could even provide incorrect results.\n* Thus it is important to reduce the number of features to an optimal number","metadata":{}},{"cell_type":"code","source":"from sklearn.decomposition import PCA\npca = PCA(n_components=532)\nX_pca = pca.fit_transform(X_final)\n# X_test = pca.transform(X_test)","metadata":{"execution":{"iopub.status.busy":"2024-04-10T11:13:12.529987Z","iopub.execute_input":"2024-04-10T11:13:12.530432Z","iopub.status.idle":"2024-04-10T11:14:02.201684Z","shell.execute_reply.started":"2024-04-10T11:13:12.530392Z","shell.execute_reply":"2024-04-10T11:14:02.200412Z"},"trusted":true},"execution_count":187,"outputs":[]},{"cell_type":"markdown","source":"* ### To Find the most optimal number of features, hit and trial method was used.\n* ### The LogisticRegression was used as an estimator.\n* ### Started by taking values in steps of 500 and later on reduced it to 100 and so on.\n* ### Finally we accuracy peaked at **532** and hence took it as the value for n_components attribute in PCA","metadata":{}},{"cell_type":"code","source":"pca.explained_variance_","metadata":{"execution":{"iopub.status.busy":"2024-04-10T11:14:02.203142Z","iopub.execute_input":"2024-04-10T11:14:02.203587Z","iopub.status.idle":"2024-04-10T11:14:02.222882Z","shell.execute_reply.started":"2024-04-10T11:14:02.203547Z","shell.execute_reply":"2024-04-10T11:14:02.221816Z"},"trusted":true},"execution_count":188,"outputs":[{"execution_count":188,"output_type":"execute_result","data":{"text/plain":"array([2.46981068e+00, 1.10503835e+00, 9.25270242e-01, 7.47373240e-01,\n       5.95650452e-01, 1.59361920e-01, 4.04239620e-02, 3.52853114e-02,\n       2.82912788e-02, 2.35385823e-02, 2.32248898e-02, 2.23757197e-02,\n       2.04015914e-02, 1.93791462e-02, 1.89194825e-02, 1.85017273e-02,\n       1.63114890e-02, 1.59823974e-02, 1.54422643e-02, 1.45500723e-02,\n       1.39789670e-02, 1.32021249e-02, 1.28217959e-02, 1.25832621e-02,\n       1.23676295e-02, 1.19702019e-02, 1.19450673e-02, 1.17282412e-02,\n       1.11987773e-02, 1.11635391e-02, 1.09797578e-02, 1.08946713e-02,\n       1.08264406e-02, 1.07288436e-02, 1.05537085e-02, 1.04876274e-02,\n       1.04318651e-02, 1.02502255e-02, 1.02120718e-02, 1.01046522e-02,\n       9.88835069e-03, 9.81619238e-03, 9.74354806e-03, 9.70815601e-03,\n       9.63226956e-03, 9.54017481e-03, 9.50667810e-03, 9.41628479e-03,\n       9.31074774e-03, 9.28279522e-03, 9.20832805e-03, 9.13827295e-03,\n       9.09357423e-03, 9.04069986e-03, 8.97884996e-03, 8.93301714e-03,\n       8.86237458e-03, 8.83996480e-03, 8.74122716e-03, 8.61604846e-03,\n       8.56288214e-03, 8.54751738e-03, 8.41818191e-03, 8.41669058e-03,\n       8.33651594e-03, 8.29315844e-03, 8.12058894e-03, 8.10070879e-03,\n       8.04446223e-03, 7.99520186e-03, 7.95928888e-03, 7.89821380e-03,\n       7.84755791e-03, 7.82313704e-03, 7.80188716e-03, 7.75852340e-03,\n       7.70104676e-03, 7.65018216e-03, 7.60096042e-03, 7.56738657e-03,\n       7.50225234e-03, 7.41823194e-03, 7.40004804e-03, 7.35048069e-03,\n       7.27462359e-03, 7.19659305e-03, 7.07713563e-03, 7.05080861e-03,\n       6.97112823e-03, 6.96326673e-03, 6.85259766e-03, 6.78659859e-03,\n       6.68094258e-03, 6.61354106e-03, 6.57829576e-03, 6.45362156e-03,\n       6.36147922e-03, 6.29144699e-03, 6.18668053e-03, 6.12275609e-03,\n       6.04078850e-03, 5.90625153e-03, 5.86060141e-03, 5.62089544e-03,\n       5.58378173e-03, 5.56913133e-03, 5.34073056e-03, 5.32508300e-03,\n       5.28968523e-03, 5.13531590e-03, 4.98351487e-03, 4.94562689e-03,\n       4.90077317e-03, 4.80425876e-03, 4.63189661e-03, 4.43615185e-03,\n       4.30315619e-03, 4.12933115e-03, 3.97096789e-03, 3.78736351e-03,\n       3.69210987e-03, 3.62216719e-03, 3.53812769e-03, 3.45319863e-03,\n       3.41773446e-03, 3.28355563e-03, 3.24832040e-03, 3.23510610e-03,\n       3.09973476e-03, 3.06630999e-03, 3.05076214e-03, 2.97301918e-03,\n       2.93739880e-03, 2.90091338e-03, 2.87585439e-03, 2.79060530e-03,\n       2.76860519e-03, 2.69998115e-03, 2.63791790e-03, 2.61222378e-03,\n       2.59916308e-03, 2.51969392e-03, 2.49758669e-03, 2.45094305e-03,\n       2.43856687e-03, 2.35001149e-03, 2.31674548e-03, 2.30565343e-03,\n       2.26378039e-03, 2.25678793e-03, 2.23136268e-03, 2.18491365e-03,\n       2.16001577e-03, 2.14154512e-03, 2.11616714e-03, 2.10819196e-03,\n       2.07804517e-03, 2.04909223e-03, 2.03148004e-03, 2.01085893e-03,\n       1.97553116e-03, 1.96575653e-03, 1.95849792e-03, 1.93754247e-03,\n       1.92493399e-03, 1.91000652e-03, 1.88708664e-03, 1.87837452e-03,\n       1.85486376e-03, 1.82794283e-03, 1.82065407e-03, 1.80822900e-03,\n       1.80340606e-03, 1.78286247e-03, 1.77542893e-03, 1.75322376e-03,\n       1.73845570e-03, 1.71428620e-03, 1.70809613e-03, 1.69470247e-03,\n       1.67226691e-03, 1.66935178e-03, 1.65507017e-03, 1.64378975e-03,\n       1.62602862e-03, 1.59642238e-03, 1.58573742e-03, 1.58035947e-03,\n       1.54169223e-03, 1.53291262e-03, 1.52736928e-03, 1.51285898e-03,\n       1.50895666e-03, 1.49401489e-03, 1.48252433e-03, 1.47360231e-03,\n       1.45552962e-03, 1.44971008e-03, 1.44277124e-03, 1.43660752e-03,\n       1.42702842e-03, 1.41868839e-03, 1.40980619e-03, 1.40598596e-03,\n       1.39476014e-03, 1.38761652e-03, 1.38381707e-03, 1.37395078e-03,\n       1.36286078e-03, 1.35767743e-03, 1.34889143e-03, 1.34274532e-03,\n       1.33331785e-03, 1.32075507e-03, 1.31462636e-03, 1.30482545e-03,\n       1.29587084e-03, 1.28469017e-03, 1.27335533e-03, 1.26716663e-03,\n       1.25933182e-03, 1.25405624e-03, 1.24979081e-03, 1.23335081e-03,\n       1.22844864e-03, 1.22364216e-03, 1.21557246e-03, 1.20862851e-03,\n       1.20496701e-03, 1.20231102e-03, 1.19317110e-03, 1.17846891e-03,\n       1.17768002e-03, 1.17169482e-03, 1.16836228e-03, 1.16512413e-03,\n       1.15799033e-03, 1.15296184e-03, 1.14508806e-03, 1.13971051e-03,\n       1.13266565e-03, 1.13010269e-03, 1.12640887e-03, 1.12229605e-03,\n       1.11705483e-03, 1.10795874e-03, 1.10581989e-03, 1.09841462e-03,\n       1.09549140e-03, 1.08726072e-03, 1.07852735e-03, 1.07734402e-03,\n       1.07558683e-03, 1.07026068e-03, 1.06816457e-03, 1.06539931e-03,\n       1.06190030e-03, 1.06140093e-03, 1.05214331e-03, 1.04739586e-03,\n       1.04150220e-03, 1.03921150e-03, 1.03302155e-03, 1.03171364e-03,\n       1.02890013e-03, 1.02449054e-03, 1.02355203e-03, 1.01785079e-03,\n       1.01285098e-03, 1.01013195e-03, 1.00789335e-03, 9.98521315e-04,\n       9.95450127e-04, 9.91864416e-04, 9.87199880e-04, 9.83833178e-04,\n       9.78876216e-04, 9.76232342e-04, 9.74420042e-04, 9.68869666e-04,\n       9.67047381e-04, 9.63703206e-04, 9.61169942e-04, 9.55211550e-04,\n       9.50868502e-04, 9.47763406e-04, 9.42073220e-04, 9.40382571e-04,\n       9.35699011e-04, 9.32918869e-04, 9.27259971e-04, 9.24851621e-04,\n       9.23692526e-04, 9.18211835e-04, 9.14746702e-04, 9.12344952e-04,\n       9.10406699e-04, 9.06790455e-04, 9.06058437e-04, 9.00027197e-04,\n       8.96487565e-04, 8.96069473e-04, 8.92369861e-04, 8.85599877e-04,\n       8.81934211e-04, 8.78909604e-04, 8.77098733e-04, 8.74899217e-04,\n       8.72745294e-04, 8.69125758e-04, 8.65397462e-04, 8.59609630e-04,\n       8.56530069e-04, 8.52327265e-04, 8.50914196e-04, 8.45964669e-04,\n       8.44783227e-04, 8.35603803e-04, 8.34982642e-04, 8.34657273e-04,\n       8.31982664e-04, 8.30608054e-04, 8.27834796e-04, 8.22677363e-04,\n       8.17586176e-04, 8.16374738e-04, 8.12501880e-04, 8.09732649e-04,\n       8.03580833e-04, 8.02879525e-04, 8.02272955e-04, 7.99189328e-04,\n       7.96406917e-04, 7.95063764e-04, 7.88266291e-04, 7.87589146e-04,\n       7.86737928e-04, 7.85979682e-04, 7.83995106e-04, 7.78414090e-04,\n       7.77505426e-04, 7.76448621e-04, 7.72185426e-04, 7.67665305e-04,\n       7.64250054e-04, 7.60293530e-04, 7.60167502e-04, 7.56668443e-04,\n       7.54182649e-04, 7.53825979e-04, 7.52034508e-04, 7.49570107e-04,\n       7.45181314e-04, 7.42977559e-04, 7.42155141e-04, 7.40360785e-04,\n       7.37171158e-04, 7.36183357e-04, 7.35144993e-04, 7.33711690e-04,\n       7.31452182e-04, 7.27776288e-04, 7.26288746e-04, 7.24918200e-04,\n       7.24403929e-04, 7.20792567e-04, 7.18768555e-04, 7.17149310e-04,\n       7.16155360e-04, 7.10630610e-04, 7.09513627e-04, 7.07857493e-04,\n       7.06404170e-04, 7.02736493e-04, 7.01110447e-04, 7.00481667e-04,\n       6.98548146e-04, 6.95267054e-04, 6.92603182e-04, 6.88631792e-04,\n       6.87379778e-04, 6.84080368e-04, 6.82387061e-04, 6.81584743e-04,\n       6.78997675e-04, 6.77420647e-04, 6.74512259e-04, 6.73620929e-04,\n       6.72644970e-04, 6.70310206e-04, 6.67244585e-04, 6.66215578e-04,\n       6.63449116e-04, 6.62810322e-04, 6.60314019e-04, 6.59880152e-04,\n       6.56501356e-04, 6.53655704e-04, 6.52443806e-04, 6.50621736e-04,\n       6.49365778e-04, 6.48282356e-04, 6.45384251e-04, 6.44217486e-04,\n       6.43516127e-04, 6.41887338e-04, 6.37831744e-04, 6.36659835e-04,\n       6.35389424e-04, 6.33000031e-04, 6.31953845e-04, 6.28095673e-04,\n       6.26754301e-04, 6.25052789e-04, 6.23986859e-04, 6.23147418e-04,\n       6.19084128e-04, 6.17861776e-04, 6.15868666e-04, 6.15785641e-04,\n       6.13551657e-04, 6.12263510e-04, 6.11140861e-04, 6.08649771e-04,\n       6.06534067e-04, 6.04868637e-04, 6.01081725e-04, 6.00790495e-04,\n       5.98962666e-04, 5.96311065e-04, 5.95746840e-04, 5.94897945e-04,\n       5.93159029e-04, 5.91351012e-04, 5.90622077e-04, 5.88522193e-04,\n       5.86575592e-04, 5.85687645e-04, 5.84157257e-04, 5.82897445e-04,\n       5.82246134e-04, 5.80948717e-04, 5.79335834e-04, 5.78724774e-04,\n       5.76060100e-04, 5.75367386e-04, 5.75071192e-04, 5.73466578e-04,\n       5.71164772e-04, 5.69349110e-04, 5.67995664e-04, 5.65288376e-04,\n       5.63661079e-04, 5.63276359e-04, 5.60786679e-04, 5.58279410e-04,\n       5.57674850e-04, 5.56050163e-04, 5.55346732e-04, 5.53609026e-04,\n       5.52952237e-04, 5.51349721e-04, 5.48494700e-04, 5.46524997e-04,\n       5.45787395e-04, 5.44511382e-04, 5.42669165e-04, 5.41173591e-04,\n       5.40621317e-04, 5.38908666e-04, 5.38261261e-04, 5.35494819e-04,\n       5.34512825e-04, 5.30334139e-04, 5.28546886e-04, 5.28139334e-04,\n       5.27236717e-04, 5.25639642e-04, 5.24416609e-04, 5.22889331e-04,\n       5.21646825e-04, 5.20017347e-04, 5.18854681e-04, 5.17304753e-04,\n       5.16363755e-04, 5.15197288e-04, 5.14089111e-04, 5.13077760e-04,\n       5.10486225e-04, 5.08567672e-04, 5.07932706e-04, 5.06412243e-04,\n       5.04740295e-04, 5.03544183e-04, 5.01346493e-04, 5.00096234e-04,\n       4.98555986e-04, 4.95956229e-04, 4.94159476e-04, 4.93230024e-04,\n       4.91610069e-04, 4.89280293e-04, 4.88108959e-04, 4.86743936e-04,\n       4.85820175e-04, 4.83944345e-04, 4.83445099e-04, 4.81860921e-04,\n       4.79778946e-04, 4.77930529e-04, 4.76773423e-04, 4.75136568e-04,\n       4.74554058e-04, 4.72790481e-04, 4.71329917e-04, 4.69113419e-04,\n       4.68299171e-04, 4.67829820e-04, 4.66354420e-04, 4.65758272e-04,\n       4.63523372e-04, 4.60574912e-04, 4.58186507e-04, 4.56750954e-04,\n       4.55391814e-04, 4.52858885e-04, 4.51334564e-04, 4.49866826e-04,\n       4.49288462e-04, 4.46605419e-04, 4.44792078e-04, 4.43164812e-04])"},"metadata":{}}]},{"cell_type":"markdown","source":"## Using trial and error we find the no. of features for optimum results is 532","metadata":{}},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\n\nX_train,X_test,y_train,y_test=train_test_split(X_pca,y,test_size=0.15,random_state=42)\nprint(X_train.shape)\nprint(X_test.shape)\nprint(y_train.shape)\nprint(y_test.shape)","metadata":{"execution":{"iopub.status.busy":"2024-04-10T11:14:02.224744Z","iopub.execute_input":"2024-04-10T11:14:02.225163Z","iopub.status.idle":"2024-04-10T11:14:02.249789Z","shell.execute_reply.started":"2024-04-10T11:14:02.225125Z","shell.execute_reply":"2024-04-10T11:14:02.248542Z"},"trusted":true},"execution_count":189,"outputs":[{"name":"stdout","text":"(11588, 532)\n(2046, 532)\n(11588,)\n(2046,)\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Applying various machine learning models","metadata":{}},{"cell_type":"markdown","source":"## 1. Baseline model(Dummy Classifier)","metadata":{}},{"cell_type":"code","source":"from sklearn.dummy import DummyClassifier\n\ndc = DummyClassifier(strategy=\"most_frequent\")\ndc.fit(X_train,y_train)","metadata":{"execution":{"iopub.status.busy":"2024-04-10T11:14:02.251359Z","iopub.execute_input":"2024-04-10T11:14:02.251732Z","iopub.status.idle":"2024-04-10T11:14:02.261322Z","shell.execute_reply.started":"2024-04-10T11:14:02.251702Z","shell.execute_reply":"2024-04-10T11:14:02.260229Z"},"trusted":true},"execution_count":190,"outputs":[{"execution_count":190,"output_type":"execute_result","data":{"text/plain":"DummyClassifier(strategy='most_frequent')","text/html":"<style>#sk-container-id-18 {color: black;background-color: white;}#sk-container-id-18 pre{padding: 0;}#sk-container-id-18 div.sk-toggleable {background-color: white;}#sk-container-id-18 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-18 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-18 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-18 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-18 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-18 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-18 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-18 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-18 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-18 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-18 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-18 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-18 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-18 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-18 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-18 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-18 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-18 div.sk-item {position: relative;z-index: 1;}#sk-container-id-18 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-18 div.sk-item::before, #sk-container-id-18 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-18 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-18 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-18 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-18 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-18 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-18 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-18 div.sk-label-container {text-align: center;}#sk-container-id-18 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-18 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-18\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>DummyClassifier(strategy=&#x27;most_frequent&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-20\" type=\"checkbox\" checked><label for=\"sk-estimator-id-20\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">DummyClassifier</label><div class=\"sk-toggleable__content\"><pre>DummyClassifier(strategy=&#x27;most_frequent&#x27;)</pre></div></div></div></div></div>"},"metadata":{}}]},{"cell_type":"code","source":"dc_pred=dc.predict(X_test)\nprint(accuracy_score(y_test,dc_pred))","metadata":{"execution":{"iopub.status.busy":"2024-04-10T11:14:02.262743Z","iopub.execute_input":"2024-04-10T11:14:02.263081Z","iopub.status.idle":"2024-04-10T11:14:02.271649Z","shell.execute_reply.started":"2024-04-10T11:14:02.263054Z","shell.execute_reply":"2024-04-10T11:14:02.270462Z"},"trusted":true},"execution_count":191,"outputs":[{"name":"stdout","text":"0.7653958944281525\n","output_type":"stream"}]},{"cell_type":"markdown","source":"### Accuracy found 0.765","metadata":{}},{"cell_type":"markdown","source":"## 2. Logistic Regression","metadata":{}},{"cell_type":"code","source":"from sklearn.linear_model import LogisticRegression\n\nlr=LogisticRegression()\n\nlr.fit(X_train,y_train)","metadata":{"execution":{"iopub.status.busy":"2024-04-10T11:14:02.272903Z","iopub.execute_input":"2024-04-10T11:14:02.273223Z","iopub.status.idle":"2024-04-10T11:14:04.151752Z","shell.execute_reply.started":"2024-04-10T11:14:02.273195Z","shell.execute_reply":"2024-04-10T11:14:04.150146Z"},"trusted":true},"execution_count":192,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\nSTOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n\nIncrease the number of iterations (max_iter) or scale the data as shown in:\n    https://scikit-learn.org/stable/modules/preprocessing.html\nPlease also refer to the documentation for alternative solver options:\n    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n  n_iter_i = _check_optimize_result(\n","output_type":"stream"},{"execution_count":192,"output_type":"execute_result","data":{"text/plain":"LogisticRegression()","text/html":"<style>#sk-container-id-19 {color: black;background-color: white;}#sk-container-id-19 pre{padding: 0;}#sk-container-id-19 div.sk-toggleable {background-color: white;}#sk-container-id-19 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-19 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-19 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-19 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-19 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-19 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-19 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-19 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-19 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-19 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-19 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-19 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-19 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-19 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-19 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-19 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-19 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-19 div.sk-item {position: relative;z-index: 1;}#sk-container-id-19 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-19 div.sk-item::before, #sk-container-id-19 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-19 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-19 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-19 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-19 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-19 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-19 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-19 div.sk-label-container {text-align: center;}#sk-container-id-19 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-19 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-19\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-21\" type=\"checkbox\" checked><label for=\"sk-estimator-id-21\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression()</pre></div></div></div></div></div>"},"metadata":{}}]},{"cell_type":"code","source":"lr_pred = lr.predict(X_test)\nprint(accuracy_score(y_test,lr_pred))","metadata":{"execution":{"iopub.status.busy":"2024-04-10T11:14:04.153904Z","iopub.execute_input":"2024-04-10T11:14:04.155243Z","iopub.status.idle":"2024-04-10T11:14:04.173560Z","shell.execute_reply.started":"2024-04-10T11:14:04.155184Z","shell.execute_reply":"2024-04-10T11:14:04.171990Z"},"trusted":true},"execution_count":193,"outputs":[{"name":"stdout","text":"0.7800586510263929\n","output_type":"stream"}]},{"cell_type":"markdown","source":"### Accuracy found 0.778","metadata":{}},{"cell_type":"code","source":"lr_pred = lr.predict(X_train)\nprint(accuracy_score(y_train,lr_pred))","metadata":{"execution":{"iopub.status.busy":"2024-04-10T11:14:04.175220Z","iopub.execute_input":"2024-04-10T11:14:04.175795Z","iopub.status.idle":"2024-04-10T11:14:04.203062Z","shell.execute_reply.started":"2024-04-10T11:14:04.175753Z","shell.execute_reply":"2024-04-10T11:14:04.201966Z"},"trusted":true},"execution_count":194,"outputs":[{"name":"stdout","text":"0.7852951328960994\n","output_type":"stream"}]},{"cell_type":"code","source":"# from sklearn.model_selection import cross_val_score\n# lr=LogisticRegression()\n# cv_scores=cross_val_score(lr, X_train, y_train, cv=5)\n# print(cv_scores)","metadata":{"execution":{"iopub.status.busy":"2024-04-10T11:14:04.204774Z","iopub.execute_input":"2024-04-10T11:14:04.205933Z","iopub.status.idle":"2024-04-10T11:14:04.210338Z","shell.execute_reply.started":"2024-04-10T11:14:04.205893Z","shell.execute_reply":"2024-04-10T11:14:04.209223Z"},"trusted":true},"execution_count":195,"outputs":[]},{"cell_type":"markdown","source":"### Tuning Hyperparameters of Logistic Regression Model","metadata":{}},{"cell_type":"code","source":"# C=[0.001, 0.01, 0.1, 1, 10, 100, 1000]\nC=[0.001,0.01, 0.1, 1, 10, 100, 1000]\nsolver_options = ['lbfgs', 'liblinear', 'sag']\nmulti_class_options = ['ovr', 'multinomial']\nclass_weight_options = [None, 'balanced']\ntol_values = [1e-4, 1e-3, 1e-2]\n\nparam_grid = {\n    'C':C,\n    'solver': solver_options,\n    'multi_class': multi_class_options,\n    'class_weight':class_weight_options,\n    'tol':tol_values\n}","metadata":{"execution":{"iopub.status.busy":"2024-04-10T11:14:04.211858Z","iopub.execute_input":"2024-04-10T11:14:04.212290Z","iopub.status.idle":"2024-04-10T11:14:04.226952Z","shell.execute_reply.started":"2024-04-10T11:14:04.212241Z","shell.execute_reply":"2024-04-10T11:14:04.225407Z"},"trusted":true},"execution_count":196,"outputs":[]},{"cell_type":"code","source":"# from sklearn.model_selection import GridSearchCV\n# grid_search = GridSearchCV(LogisticRegression(), param_grid, cv=3)\n# grid_search.fit(X_train, y_train)","metadata":{"execution":{"iopub.status.busy":"2024-04-10T11:14:04.228597Z","iopub.execute_input":"2024-04-10T11:14:04.229169Z","iopub.status.idle":"2024-04-10T11:14:04.242616Z","shell.execute_reply.started":"2024-04-10T11:14:04.229127Z","shell.execute_reply":"2024-04-10T11:14:04.240945Z"},"trusted":true},"execution_count":197,"outputs":[]},{"cell_type":"code","source":"# print(grid_search.best_params_)\n# {'C': 1, 'class_weight': None, 'multi_class': 'multinomial', 'solver': 'lbfgs', 'tol': 0.0001}","metadata":{"execution":{"iopub.status.busy":"2024-04-10T11:14:04.244278Z","iopub.execute_input":"2024-04-10T11:14:04.245389Z","iopub.status.idle":"2024-04-10T11:14:04.256046Z","shell.execute_reply.started":"2024-04-10T11:14:04.245332Z","shell.execute_reply":"2024-04-10T11:14:04.254582Z"},"trusted":true},"execution_count":198,"outputs":[]},{"cell_type":"code","source":"lr_tuned=LogisticRegression(C=1,class_weight=None, multi_class='multinomial', solver='lbfgs',tol=0.0001)\nlr_tuned.fit(X_train,y_train)","metadata":{"execution":{"iopub.status.busy":"2024-04-10T11:14:04.287306Z","iopub.execute_input":"2024-04-10T11:14:04.292303Z","iopub.status.idle":"2024-04-10T11:14:06.342394Z","shell.execute_reply.started":"2024-04-10T11:14:04.292215Z","shell.execute_reply":"2024-04-10T11:14:06.340709Z"},"trusted":true},"execution_count":199,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\nSTOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n\nIncrease the number of iterations (max_iter) or scale the data as shown in:\n    https://scikit-learn.org/stable/modules/preprocessing.html\nPlease also refer to the documentation for alternative solver options:\n    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n  n_iter_i = _check_optimize_result(\n","output_type":"stream"},{"execution_count":199,"output_type":"execute_result","data":{"text/plain":"LogisticRegression(C=1, multi_class='multinomial')","text/html":"<style>#sk-container-id-20 {color: black;background-color: white;}#sk-container-id-20 pre{padding: 0;}#sk-container-id-20 div.sk-toggleable {background-color: white;}#sk-container-id-20 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-20 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-20 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-20 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-20 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-20 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-20 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-20 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-20 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-20 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-20 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-20 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-20 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-20 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-20 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-20 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-20 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-20 div.sk-item {position: relative;z-index: 1;}#sk-container-id-20 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-20 div.sk-item::before, #sk-container-id-20 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-20 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-20 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-20 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-20 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-20 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-20 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-20 div.sk-label-container {text-align: center;}#sk-container-id-20 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-20 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-20\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression(C=1, multi_class=&#x27;multinomial&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-22\" type=\"checkbox\" checked><label for=\"sk-estimator-id-22\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression(C=1, multi_class=&#x27;multinomial&#x27;)</pre></div></div></div></div></div>"},"metadata":{}}]},{"cell_type":"code","source":"lr_tuned_pred = lr_tuned.predict(X_test)\nprint(accuracy_score(y_test,lr_tuned_pred))","metadata":{"execution":{"iopub.status.busy":"2024-04-10T11:14:06.350691Z","iopub.execute_input":"2024-04-10T11:14:06.351610Z","iopub.status.idle":"2024-04-10T11:14:06.374687Z","shell.execute_reply.started":"2024-04-10T11:14:06.351548Z","shell.execute_reply":"2024-04-10T11:14:06.373027Z"},"trusted":true},"execution_count":200,"outputs":[{"name":"stdout","text":"0.7800586510263929\n","output_type":"stream"}]},{"cell_type":"markdown","source":"### Accuracy found 0.778","metadata":{}},{"cell_type":"markdown","source":"## 3. K Nearest Neighbors","metadata":{}},{"cell_type":"code","source":"from sklearn.neighbors import KNeighborsClassifier\nknn=KNeighborsClassifier(n_neighbors=30)\nknn.fit(X_train,y_train)","metadata":{"execution":{"iopub.status.busy":"2024-04-10T11:14:06.381900Z","iopub.execute_input":"2024-04-10T11:14:06.383135Z","iopub.status.idle":"2024-04-10T11:14:06.417360Z","shell.execute_reply.started":"2024-04-10T11:14:06.383066Z","shell.execute_reply":"2024-04-10T11:14:06.415772Z"},"trusted":true},"execution_count":201,"outputs":[{"execution_count":201,"output_type":"execute_result","data":{"text/plain":"KNeighborsClassifier(n_neighbors=30)","text/html":"<style>#sk-container-id-21 {color: black;background-color: white;}#sk-container-id-21 pre{padding: 0;}#sk-container-id-21 div.sk-toggleable {background-color: white;}#sk-container-id-21 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-21 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-21 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-21 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-21 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-21 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-21 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-21 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-21 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-21 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-21 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-21 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-21 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-21 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-21 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-21 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-21 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-21 div.sk-item {position: relative;z-index: 1;}#sk-container-id-21 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-21 div.sk-item::before, #sk-container-id-21 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-21 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-21 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-21 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-21 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-21 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-21 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-21 div.sk-label-container {text-align: center;}#sk-container-id-21 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-21 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-21\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KNeighborsClassifier(n_neighbors=30)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-23\" type=\"checkbox\" checked><label for=\"sk-estimator-id-23\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KNeighborsClassifier</label><div class=\"sk-toggleable__content\"><pre>KNeighborsClassifier(n_neighbors=30)</pre></div></div></div></div></div>"},"metadata":{}}]},{"cell_type":"code","source":"knn_pred=knn.predict(X_test)\nprint(accuracy_score(y_test,knn_pred))","metadata":{"execution":{"iopub.status.busy":"2024-04-10T11:14:06.424713Z","iopub.execute_input":"2024-04-10T11:14:06.429323Z","iopub.status.idle":"2024-04-10T11:14:07.559422Z","shell.execute_reply.started":"2024-04-10T11:14:06.429247Z","shell.execute_reply":"2024-04-10T11:14:07.558612Z"},"trusted":true},"execution_count":202,"outputs":[{"name":"stdout","text":"0.7678396871945259\n","output_type":"stream"}]},{"cell_type":"markdown","source":"### Accuracy found 0.768","metadata":{}},{"cell_type":"markdown","source":"## 4. Decision Tree","metadata":{}},{"cell_type":"code","source":"from sklearn.tree import DecisionTreeClassifier\ndtc=DecisionTreeClassifier()\ndtc.fit(X_train,y_train)","metadata":{"execution":{"iopub.status.busy":"2024-04-10T11:14:07.561004Z","iopub.execute_input":"2024-04-10T11:14:07.561657Z","iopub.status.idle":"2024-04-10T11:14:31.672365Z","shell.execute_reply.started":"2024-04-10T11:14:07.561619Z","shell.execute_reply":"2024-04-10T11:14:31.671157Z"},"trusted":true},"execution_count":203,"outputs":[{"execution_count":203,"output_type":"execute_result","data":{"text/plain":"DecisionTreeClassifier()","text/html":"<style>#sk-container-id-22 {color: black;background-color: white;}#sk-container-id-22 pre{padding: 0;}#sk-container-id-22 div.sk-toggleable {background-color: white;}#sk-container-id-22 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-22 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-22 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-22 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-22 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-22 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-22 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-22 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-22 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-22 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-22 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-22 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-22 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-22 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-22 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-22 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-22 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-22 div.sk-item {position: relative;z-index: 1;}#sk-container-id-22 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-22 div.sk-item::before, #sk-container-id-22 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-22 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-22 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-22 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-22 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-22 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-22 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-22 div.sk-label-container {text-align: center;}#sk-container-id-22 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-22 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-22\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>DecisionTreeClassifier()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-24\" type=\"checkbox\" checked><label for=\"sk-estimator-id-24\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">DecisionTreeClassifier</label><div class=\"sk-toggleable__content\"><pre>DecisionTreeClassifier()</pre></div></div></div></div></div>"},"metadata":{}}]},{"cell_type":"code","source":"dtc_pred = dtc.predict(X_test)\nprint(accuracy_score(y_test,dtc_pred))","metadata":{"execution":{"iopub.status.busy":"2024-04-10T11:14:31.674037Z","iopub.execute_input":"2024-04-10T11:14:31.674741Z","iopub.status.idle":"2024-04-10T11:14:31.685560Z","shell.execute_reply.started":"2024-04-10T11:14:31.674699Z","shell.execute_reply":"2024-04-10T11:14:31.684385Z"},"trusted":true},"execution_count":204,"outputs":[{"name":"stdout","text":"0.6221896383186706\n","output_type":"stream"}]},{"cell_type":"markdown","source":"### Accuracy found 0.634","metadata":{}},{"cell_type":"markdown","source":"## 5. Random Forest","metadata":{}},{"cell_type":"code","source":"from sklearn.ensemble import RandomForestClassifier\n\nrfc=RandomForestClassifier()\nrfc.fit(X_train,y_train)","metadata":{"execution":{"iopub.status.busy":"2024-04-10T11:14:31.687275Z","iopub.execute_input":"2024-04-10T11:14:31.687646Z","iopub.status.idle":"2024-04-10T11:15:35.996593Z","shell.execute_reply.started":"2024-04-10T11:14:31.687617Z","shell.execute_reply":"2024-04-10T11:15:35.995481Z"},"trusted":true},"execution_count":205,"outputs":[{"execution_count":205,"output_type":"execute_result","data":{"text/plain":"RandomForestClassifier()","text/html":"<style>#sk-container-id-23 {color: black;background-color: white;}#sk-container-id-23 pre{padding: 0;}#sk-container-id-23 div.sk-toggleable {background-color: white;}#sk-container-id-23 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-23 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-23 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-23 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-23 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-23 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-23 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-23 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-23 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-23 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-23 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-23 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-23 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-23 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-23 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-23 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-23 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-23 div.sk-item {position: relative;z-index: 1;}#sk-container-id-23 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-23 div.sk-item::before, #sk-container-id-23 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-23 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-23 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-23 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-23 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-23 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-23 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-23 div.sk-label-container {text-align: center;}#sk-container-id-23 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-23 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-23\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-25\" type=\"checkbox\" checked><label for=\"sk-estimator-id-25\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier()</pre></div></div></div></div></div>"},"metadata":{}}]},{"cell_type":"code","source":"rfc_pred=rfc.predict(X_test)\nprint(accuracy_score(y_test,rfc_pred))","metadata":{"execution":{"iopub.status.busy":"2024-04-10T11:15:35.998305Z","iopub.execute_input":"2024-04-10T11:15:35.998648Z","iopub.status.idle":"2024-04-10T11:15:36.087158Z","shell.execute_reply.started":"2024-04-10T11:15:35.998620Z","shell.execute_reply":"2024-04-10T11:15:36.085989Z"},"trusted":true},"execution_count":206,"outputs":[{"name":"stdout","text":"0.7712609970674487\n","output_type":"stream"}]},{"cell_type":"markdown","source":"### Accuracy found 0.769","metadata":{}},{"cell_type":"markdown","source":"## 6. Support Vector Machine","metadata":{}},{"cell_type":"code","source":"from sklearn.svm import SVC\n\nsvc=SVC()\nsvc.fit(X_train,y_train)","metadata":{"execution":{"iopub.status.busy":"2024-04-10T11:15:36.088624Z","iopub.execute_input":"2024-04-10T11:15:36.089002Z","iopub.status.idle":"2024-04-10T11:16:25.990038Z","shell.execute_reply.started":"2024-04-10T11:15:36.088973Z","shell.execute_reply":"2024-04-10T11:16:25.988893Z"},"trusted":true},"execution_count":207,"outputs":[{"execution_count":207,"output_type":"execute_result","data":{"text/plain":"SVC()","text/html":"<style>#sk-container-id-24 {color: black;background-color: white;}#sk-container-id-24 pre{padding: 0;}#sk-container-id-24 div.sk-toggleable {background-color: white;}#sk-container-id-24 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-24 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-24 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-24 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-24 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-24 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-24 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-24 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-24 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-24 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-24 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-24 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-24 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-24 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-24 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-24 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-24 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-24 div.sk-item {position: relative;z-index: 1;}#sk-container-id-24 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-24 div.sk-item::before, #sk-container-id-24 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-24 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-24 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-24 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-24 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-24 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-24 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-24 div.sk-label-container {text-align: center;}#sk-container-id-24 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-24 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-24\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>SVC()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-26\" type=\"checkbox\" checked><label for=\"sk-estimator-id-26\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SVC</label><div class=\"sk-toggleable__content\"><pre>SVC()</pre></div></div></div></div></div>"},"metadata":{}}]},{"cell_type":"code","source":"svc_pred=svc.predict(X_test)\nprint(accuracy_score(y_test,svc_pred))","metadata":{"execution":{"iopub.status.busy":"2024-04-10T11:16:25.991450Z","iopub.execute_input":"2024-04-10T11:16:25.991965Z","iopub.status.idle":"2024-04-10T11:16:36.040488Z","shell.execute_reply.started":"2024-04-10T11:16:25.991935Z","shell.execute_reply":"2024-04-10T11:16:36.039088Z"},"trusted":true},"execution_count":208,"outputs":[{"name":"stdout","text":"0.7668621700879765\n","output_type":"stream"}]},{"cell_type":"markdown","source":"### Accuracy found 0.766","metadata":{}},{"cell_type":"code","source":"# from sklearn.svm import SVC\n# poly_svm = SVC(kernel='poly', degree=7, C=1.0)\n# poly_svm.fit(X_train,y_train)","metadata":{"execution":{"iopub.status.busy":"2024-04-10T11:16:36.041823Z","iopub.execute_input":"2024-04-10T11:16:36.042165Z","iopub.status.idle":"2024-04-10T11:16:36.049477Z","shell.execute_reply.started":"2024-04-10T11:16:36.042129Z","shell.execute_reply":"2024-04-10T11:16:36.048452Z"},"trusted":true},"execution_count":209,"outputs":[]},{"cell_type":"code","source":"# poly_pred=poly_svm.predict(X_test)\n# print(accuracy_score(y_test,poly_pred))","metadata":{"execution":{"iopub.status.busy":"2024-04-10T11:16:36.050884Z","iopub.execute_input":"2024-04-10T11:16:36.051282Z","iopub.status.idle":"2024-04-10T11:16:36.064617Z","shell.execute_reply.started":"2024-04-10T11:16:36.051254Z","shell.execute_reply":"2024-04-10T11:16:36.063567Z"},"trusted":true},"execution_count":210,"outputs":[]},{"cell_type":"markdown","source":"## 7. Bagging","metadata":{}},{"cell_type":"code","source":"from sklearn.ensemble import BaggingClassifier\n\nbag = BaggingClassifier(estimator=LogisticRegression())\nbag.fit(X_train,y_train)","metadata":{"execution":{"iopub.status.busy":"2024-04-10T11:16:36.065691Z","iopub.execute_input":"2024-04-10T11:16:36.066010Z","iopub.status.idle":"2024-04-10T11:16:56.625991Z","shell.execute_reply.started":"2024-04-10T11:16:36.065982Z","shell.execute_reply":"2024-04-10T11:16:56.624551Z"},"trusted":true},"execution_count":211,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\nSTOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n\nIncrease the number of iterations (max_iter) or scale the data as shown in:\n    https://scikit-learn.org/stable/modules/preprocessing.html\nPlease also refer to the documentation for alternative solver options:\n    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n  n_iter_i = _check_optimize_result(\n/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\nSTOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n\nIncrease the number of iterations (max_iter) or scale the data as shown in:\n    https://scikit-learn.org/stable/modules/preprocessing.html\nPlease also refer to the documentation for alternative solver options:\n    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n  n_iter_i = _check_optimize_result(\n/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\nSTOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n\nIncrease the number of iterations (max_iter) or scale the data as shown in:\n    https://scikit-learn.org/stable/modules/preprocessing.html\nPlease also refer to the documentation for alternative solver options:\n    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n  n_iter_i = _check_optimize_result(\n/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\nSTOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n\nIncrease the number of iterations (max_iter) or scale the data as shown in:\n    https://scikit-learn.org/stable/modules/preprocessing.html\nPlease also refer to the documentation for alternative solver options:\n    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n  n_iter_i = _check_optimize_result(\n/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\nSTOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n\nIncrease the number of iterations (max_iter) or scale the data as shown in:\n    https://scikit-learn.org/stable/modules/preprocessing.html\nPlease also refer to the documentation for alternative solver options:\n    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n  n_iter_i = _check_optimize_result(\n/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\nSTOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n\nIncrease the number of iterations (max_iter) or scale the data as shown in:\n    https://scikit-learn.org/stable/modules/preprocessing.html\nPlease also refer to the documentation for alternative solver options:\n    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n  n_iter_i = _check_optimize_result(\n/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\nSTOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n\nIncrease the number of iterations (max_iter) or scale the data as shown in:\n    https://scikit-learn.org/stable/modules/preprocessing.html\nPlease also refer to the documentation for alternative solver options:\n    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n  n_iter_i = _check_optimize_result(\n/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\nSTOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n\nIncrease the number of iterations (max_iter) or scale the data as shown in:\n    https://scikit-learn.org/stable/modules/preprocessing.html\nPlease also refer to the documentation for alternative solver options:\n    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n  n_iter_i = _check_optimize_result(\n/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\nSTOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n\nIncrease the number of iterations (max_iter) or scale the data as shown in:\n    https://scikit-learn.org/stable/modules/preprocessing.html\nPlease also refer to the documentation for alternative solver options:\n    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n  n_iter_i = _check_optimize_result(\n/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\nSTOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n\nIncrease the number of iterations (max_iter) or scale the data as shown in:\n    https://scikit-learn.org/stable/modules/preprocessing.html\nPlease also refer to the documentation for alternative solver options:\n    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n  n_iter_i = _check_optimize_result(\n","output_type":"stream"},{"execution_count":211,"output_type":"execute_result","data":{"text/plain":"BaggingClassifier(estimator=LogisticRegression())","text/html":"<style>#sk-container-id-25 {color: black;background-color: white;}#sk-container-id-25 pre{padding: 0;}#sk-container-id-25 div.sk-toggleable {background-color: white;}#sk-container-id-25 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-25 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-25 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-25 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-25 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-25 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-25 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-25 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-25 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-25 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-25 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-25 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-25 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-25 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-25 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-25 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-25 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-25 div.sk-item {position: relative;z-index: 1;}#sk-container-id-25 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-25 div.sk-item::before, #sk-container-id-25 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-25 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-25 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-25 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-25 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-25 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-25 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-25 div.sk-label-container {text-align: center;}#sk-container-id-25 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-25 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-25\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>BaggingClassifier(estimator=LogisticRegression())</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-27\" type=\"checkbox\" ><label for=\"sk-estimator-id-27\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">BaggingClassifier</label><div class=\"sk-toggleable__content\"><pre>BaggingClassifier(estimator=LogisticRegression())</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-28\" type=\"checkbox\" ><label for=\"sk-estimator-id-28\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression()</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-29\" type=\"checkbox\" ><label for=\"sk-estimator-id-29\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression()</pre></div></div></div></div></div></div></div></div></div></div>"},"metadata":{}}]},{"cell_type":"code","source":"bag_pred=bag.predict(X_test)\nprint(accuracy_score(y_test,bag_pred))","metadata":{"execution":{"iopub.status.busy":"2024-04-10T11:16:56.628409Z","iopub.execute_input":"2024-04-10T11:16:56.629244Z","iopub.status.idle":"2024-04-10T11:16:56.817946Z","shell.execute_reply.started":"2024-04-10T11:16:56.629187Z","shell.execute_reply":"2024-04-10T11:16:56.816432Z"},"trusted":true},"execution_count":212,"outputs":[{"name":"stdout","text":"0.7781036168132942\n","output_type":"stream"}]},{"cell_type":"markdown","source":"### Accuracy found 0.779","metadata":{}},{"cell_type":"markdown","source":"## 8. Boosting","metadata":{}},{"cell_type":"code","source":"# from sklearn.ensemble import GradientBoostingClassifier\n\n# gbc=GradientBoostingClassifier()\n\n# gbc.fit(X_train,y_train)","metadata":{"execution":{"iopub.status.busy":"2024-04-10T11:16:56.820172Z","iopub.execute_input":"2024-04-10T11:16:56.821763Z","iopub.status.idle":"2024-04-10T11:16:56.828107Z","shell.execute_reply.started":"2024-04-10T11:16:56.821697Z","shell.execute_reply":"2024-04-10T11:16:56.826621Z"},"trusted":true},"execution_count":213,"outputs":[]},{"cell_type":"code","source":"# gbc_pred=gbc.predict(X_test)\n# print(accuracy_score(y_test,gbc_pred))","metadata":{"execution":{"iopub.status.busy":"2024-04-10T11:16:56.830709Z","iopub.execute_input":"2024-04-10T11:16:56.831826Z","iopub.status.idle":"2024-04-10T11:16:56.841555Z","shell.execute_reply.started":"2024-04-10T11:16:56.831767Z","shell.execute_reply":"2024-04-10T11:16:56.839659Z"},"trusted":true},"execution_count":214,"outputs":[]},{"cell_type":"markdown","source":"### Accuracy found 0.772","metadata":{}},{"cell_type":"markdown","source":"### Hyperparameter Tuning for BaggingClassifier","metadata":{}},{"cell_type":"code","source":"# from sklearn.ensemble import BaggingClassifier\n# from sklearn.model_selection import GridSearchCV\n# base_estimator = LogisticRegression()\n\n# bag_classifier = BaggingClassifier(base_estimator=base_estimator, random_state=42)\n\n# param_grid = {\n#     'n_estimators': [10, 50, 100],\n#     'max_samples': [0.5, 0.7, 1.0],\n#     'max_features': [0.5, 0.7, 1.0]\n# }\n\n# grid_search = GridSearchCV(bag_classifier, param_grid, cv=3,scoring='accuracy')\n# grid_search.fit(X_train,y_train)","metadata":{"execution":{"iopub.status.busy":"2024-04-10T11:16:56.844103Z","iopub.execute_input":"2024-04-10T11:16:56.845165Z","iopub.status.idle":"2024-04-10T11:16:56.852473Z","shell.execute_reply.started":"2024-04-10T11:16:56.845109Z","shell.execute_reply":"2024-04-10T11:16:56.851093Z"},"trusted":true},"execution_count":215,"outputs":[]},{"cell_type":"code","source":"# print(grid_search.best_params_)\n# best_model = grid_search.best_estimator_\n# {'max_features': 1.0, 'max_samples': 1.0, 'n_estimators': 50}","metadata":{"execution":{"iopub.status.busy":"2024-04-10T11:16:56.854978Z","iopub.execute_input":"2024-04-10T11:16:56.856219Z","iopub.status.idle":"2024-04-10T11:16:56.868911Z","shell.execute_reply.started":"2024-04-10T11:16:56.856160Z","shell.execute_reply":"2024-04-10T11:16:56.867388Z"},"trusted":true},"execution_count":216,"outputs":[]},{"cell_type":"code","source":"# best_model_pred = best_model.predict(X_test)\n# print(accuracy_score(y_test, best_model_pred))","metadata":{"execution":{"iopub.status.busy":"2024-04-10T11:16:56.871621Z","iopub.execute_input":"2024-04-10T11:16:56.873056Z","iopub.status.idle":"2024-04-10T11:16:56.880418Z","shell.execute_reply.started":"2024-04-10T11:16:56.872995Z","shell.execute_reply":"2024-04-10T11:16:56.878752Z"},"trusted":true},"execution_count":217,"outputs":[]},{"cell_type":"markdown","source":"## 9. XGBoost","metadata":{}},{"cell_type":"code","source":"from xgboost import XGBClassifier\nmodel = XGBClassifier()\nmodel.fit(X_train, y_train)","metadata":{"execution":{"iopub.status.busy":"2024-04-10T11:16:56.883417Z","iopub.execute_input":"2024-04-10T11:16:56.884752Z","iopub.status.idle":"2024-04-10T11:19:03.768451Z","shell.execute_reply.started":"2024-04-10T11:16:56.884696Z","shell.execute_reply":"2024-04-10T11:19:03.767307Z"},"trusted":true},"execution_count":218,"outputs":[{"execution_count":218,"output_type":"execute_result","data":{"text/plain":"XGBClassifier(base_score=None, booster=None, callbacks=None,\n              colsample_bylevel=None, colsample_bynode=None,\n              colsample_bytree=None, device=None, early_stopping_rounds=None,\n              enable_categorical=False, eval_metric=None, feature_types=None,\n              gamma=None, grow_policy=None, importance_type=None,\n              interaction_constraints=None, learning_rate=None, max_bin=None,\n              max_cat_threshold=None, max_cat_to_onehot=None,\n              max_delta_step=None, max_depth=None, max_leaves=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              multi_strategy=None, n_estimators=None, n_jobs=None,\n              num_parallel_tree=None, objective='multi:softprob', ...)","text/html":"<style>#sk-container-id-26 {color: black;background-color: white;}#sk-container-id-26 pre{padding: 0;}#sk-container-id-26 div.sk-toggleable {background-color: white;}#sk-container-id-26 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-26 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-26 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-26 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-26 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-26 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-26 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-26 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-26 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-26 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-26 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-26 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-26 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-26 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-26 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-26 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-26 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-26 div.sk-item {position: relative;z-index: 1;}#sk-container-id-26 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-26 div.sk-item::before, #sk-container-id-26 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-26 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-26 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-26 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-26 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-26 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-26 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-26 div.sk-label-container {text-align: center;}#sk-container-id-26 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-26 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-26\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>XGBClassifier(base_score=None, booster=None, callbacks=None,\n              colsample_bylevel=None, colsample_bynode=None,\n              colsample_bytree=None, device=None, early_stopping_rounds=None,\n              enable_categorical=False, eval_metric=None, feature_types=None,\n              gamma=None, grow_policy=None, importance_type=None,\n              interaction_constraints=None, learning_rate=None, max_bin=None,\n              max_cat_threshold=None, max_cat_to_onehot=None,\n              max_delta_step=None, max_depth=None, max_leaves=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              multi_strategy=None, n_estimators=None, n_jobs=None,\n              num_parallel_tree=None, objective=&#x27;multi:softprob&#x27;, ...)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-30\" type=\"checkbox\" checked><label for=\"sk-estimator-id-30\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">XGBClassifier</label><div class=\"sk-toggleable__content\"><pre>XGBClassifier(base_score=None, booster=None, callbacks=None,\n              colsample_bylevel=None, colsample_bynode=None,\n              colsample_bytree=None, device=None, early_stopping_rounds=None,\n              enable_categorical=False, eval_metric=None, feature_types=None,\n              gamma=None, grow_policy=None, importance_type=None,\n              interaction_constraints=None, learning_rate=None, max_bin=None,\n              max_cat_threshold=None, max_cat_to_onehot=None,\n              max_delta_step=None, max_depth=None, max_leaves=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              multi_strategy=None, n_estimators=None, n_jobs=None,\n              num_parallel_tree=None, objective=&#x27;multi:softprob&#x27;, ...)</pre></div></div></div></div></div>"},"metadata":{}}]},{"cell_type":"code","source":"from sklearn.metrics import accuracy_score\n\ny_pred = model.predict(X_test)\nprint(accuracy_score(y_test, y_pred))","metadata":{"execution":{"iopub.status.busy":"2024-04-10T11:19:03.769861Z","iopub.execute_input":"2024-04-10T11:19:03.770177Z","iopub.status.idle":"2024-04-10T11:19:03.828371Z","shell.execute_reply.started":"2024-04-10T11:19:03.770151Z","shell.execute_reply":"2024-04-10T11:19:03.827544Z"},"trusted":true},"execution_count":219,"outputs":[{"name":"stdout","text":"0.7717497556207233\n","output_type":"stream"}]},{"cell_type":"markdown","source":"### Accuracy found 0.772","metadata":{}},{"cell_type":"markdown","source":"## 10. Multilayer Preceptron","metadata":{}},{"cell_type":"code","source":"from sklearn.neural_network import MLPClassifier\n\nmlpc = MLPClassifier()\nmlpc.fit(X_train,y_train)","metadata":{"execution":{"iopub.status.busy":"2024-04-10T11:19:03.829894Z","iopub.execute_input":"2024-04-10T11:19:03.830557Z","iopub.status.idle":"2024-04-10T11:19:55.763466Z","shell.execute_reply.started":"2024-04-10T11:19:03.830518Z","shell.execute_reply":"2024-04-10T11:19:55.762347Z"},"trusted":true},"execution_count":220,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n  warnings.warn(\n","output_type":"stream"},{"execution_count":220,"output_type":"execute_result","data":{"text/plain":"MLPClassifier()","text/html":"<style>#sk-container-id-27 {color: black;background-color: white;}#sk-container-id-27 pre{padding: 0;}#sk-container-id-27 div.sk-toggleable {background-color: white;}#sk-container-id-27 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-27 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-27 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-27 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-27 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-27 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-27 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-27 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-27 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-27 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-27 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-27 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-27 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-27 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-27 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-27 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-27 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-27 div.sk-item {position: relative;z-index: 1;}#sk-container-id-27 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-27 div.sk-item::before, #sk-container-id-27 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-27 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-27 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-27 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-27 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-27 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-27 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-27 div.sk-label-container {text-align: center;}#sk-container-id-27 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-27 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-27\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>MLPClassifier()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-31\" type=\"checkbox\" checked><label for=\"sk-estimator-id-31\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">MLPClassifier</label><div class=\"sk-toggleable__content\"><pre>MLPClassifier()</pre></div></div></div></div></div>"},"metadata":{}}]},{"cell_type":"code","source":"mlpc_pred = mlpc.predict(X_test)\nprint(accuracy_score(y_test,mlpc_pred))","metadata":{"execution":{"iopub.status.busy":"2024-04-10T11:19:55.765164Z","iopub.execute_input":"2024-04-10T11:19:55.765853Z","iopub.status.idle":"2024-04-10T11:19:55.786741Z","shell.execute_reply.started":"2024-04-10T11:19:55.765813Z","shell.execute_reply":"2024-04-10T11:19:55.785106Z"},"trusted":true},"execution_count":221,"outputs":[{"name":"stdout","text":"0.7370478983382209\n","output_type":"stream"}]},{"cell_type":"markdown","source":"### Accuracy found 0.739","metadata":{}},{"cell_type":"markdown","source":"### Fine tuning the multilayer perceptron","metadata":{}},{"cell_type":"code","source":"param_grid = {\n    'hidden_layer_sizes': [(50,), (100,), (50, 50), (100, 50)],\n    'activation': ['relu', 'tanh', 'sigmoid'],\n    'solver': ['adam', 'sgd', 'lbfgs'],\n#     'learning_rate': ['constant', 'invscaling', 'adaptive'],\n#     'alpha': [0.0001, 0.001, 0.01],\n#     'batch_size': [32, 64, 128],\n#     'max_iter': [100, 200, 300],\n    'early_stopping': [True, False]\n}","metadata":{"execution":{"iopub.status.busy":"2024-04-10T11:19:55.788818Z","iopub.execute_input":"2024-04-10T11:19:55.789227Z","iopub.status.idle":"2024-04-10T11:19:55.797626Z","shell.execute_reply.started":"2024-04-10T11:19:55.789188Z","shell.execute_reply":"2024-04-10T11:19:55.796500Z"},"trusted":true},"execution_count":222,"outputs":[]},{"cell_type":"code","source":"# from sklearn.neural_network import MLPClassifier\n# grid_search = GridSearchCV(MLPClassifier(), param_grid, cv=5, n_jobs=-1)\n# grid_search.fit(X_train, y_train)","metadata":{"execution":{"iopub.status.busy":"2024-04-10T11:19:55.799542Z","iopub.execute_input":"2024-04-10T11:19:55.800359Z","iopub.status.idle":"2024-04-10T11:19:55.810105Z","shell.execute_reply.started":"2024-04-10T11:19:55.800317Z","shell.execute_reply":"2024-04-10T11:19:55.808231Z"},"trusted":true},"execution_count":223,"outputs":[]},{"cell_type":"code","source":"# best_params = grid_search.best_params_\n# print(best_params)\n# {'activation': 'tanh', 'early_stopping': True, 'hidden_layer_sizes': (50, 50), 'solver': 'adam'}","metadata":{"execution":{"iopub.status.busy":"2024-04-10T11:19:55.812335Z","iopub.execute_input":"2024-04-10T11:19:55.812789Z","iopub.status.idle":"2024-04-10T11:19:55.823692Z","shell.execute_reply.started":"2024-04-10T11:19:55.812749Z","shell.execute_reply":"2024-04-10T11:19:55.821717Z"},"trusted":true},"execution_count":224,"outputs":[]},{"cell_type":"code","source":"# best_model = grid_search.best_estimator_\nfrom sklearn.neural_network import MLPClassifier\nbest_model = MLPClassifier(activation='tanh', early_stopping=True, hidden_layer_sizes=(50, 50), solver='adam')\nbest_model.fit(X_train,y_train)","metadata":{"execution":{"iopub.status.busy":"2024-04-10T11:19:55.825867Z","iopub.execute_input":"2024-04-10T11:19:55.826550Z","iopub.status.idle":"2024-04-10T11:20:01.048531Z","shell.execute_reply.started":"2024-04-10T11:19:55.826501Z","shell.execute_reply":"2024-04-10T11:20:01.047015Z"},"trusted":true},"execution_count":225,"outputs":[{"execution_count":225,"output_type":"execute_result","data":{"text/plain":"MLPClassifier(activation='tanh', early_stopping=True,\n              hidden_layer_sizes=(50, 50))","text/html":"<style>#sk-container-id-28 {color: black;background-color: white;}#sk-container-id-28 pre{padding: 0;}#sk-container-id-28 div.sk-toggleable {background-color: white;}#sk-container-id-28 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-28 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-28 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-28 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-28 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-28 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-28 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-28 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-28 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-28 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-28 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-28 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-28 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-28 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-28 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-28 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-28 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-28 div.sk-item {position: relative;z-index: 1;}#sk-container-id-28 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-28 div.sk-item::before, #sk-container-id-28 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-28 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-28 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-28 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-28 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-28 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-28 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-28 div.sk-label-container {text-align: center;}#sk-container-id-28 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-28 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-28\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>MLPClassifier(activation=&#x27;tanh&#x27;, early_stopping=True,\n              hidden_layer_sizes=(50, 50))</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-32\" type=\"checkbox\" checked><label for=\"sk-estimator-id-32\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">MLPClassifier</label><div class=\"sk-toggleable__content\"><pre>MLPClassifier(activation=&#x27;tanh&#x27;, early_stopping=True,\n              hidden_layer_sizes=(50, 50))</pre></div></div></div></div></div>"},"metadata":{}}]},{"cell_type":"code","source":"bm_pred = best_model.predict(X_test)\nprint(accuracy_score(y_test,bm_pred))","metadata":{"execution":{"iopub.status.busy":"2024-04-10T11:20:01.050567Z","iopub.execute_input":"2024-04-10T11:20:01.051534Z","iopub.status.idle":"2024-04-10T11:20:01.096887Z","shell.execute_reply.started":"2024-04-10T11:20:01.051478Z","shell.execute_reply":"2024-04-10T11:20:01.095470Z"},"trusted":true},"execution_count":226,"outputs":[{"name":"stdout","text":"0.7761485826001955\n","output_type":"stream"}]},{"cell_type":"markdown","source":"### Accuracy found 0.780","metadata":{}},{"cell_type":"markdown","source":"## 11. LightGBM","metadata":{}},{"cell_type":"code","source":"from lightgbm import LGBMClassifier\n\nlgbm = LGBMClassifier()\nlgbm.fit(X_train,y_train)","metadata":{"execution":{"iopub.status.busy":"2024-04-10T11:20:01.099011Z","iopub.execute_input":"2024-04-10T11:20:01.099940Z","iopub.status.idle":"2024-04-10T11:21:48.127713Z","shell.execute_reply.started":"2024-04-10T11:20:01.099883Z","shell.execute_reply":"2024-04-10T11:21:48.126909Z"},"trusted":true},"execution_count":227,"outputs":[{"name":"stdout","text":"[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.146865 seconds.\nYou can set `force_col_wise=true` to remove the overhead.\n[LightGBM] [Info] Total Bins 135660\n[LightGBM] [Info] Number of data points in the train set: 11588, number of used features: 532\n[LightGBM] [Info] Start training from score -2.361044\n[LightGBM] [Info] Start training from score -4.164769\n[LightGBM] [Info] Start training from score -4.367293\n[LightGBM] [Info] Start training from score -3.621153\n[LightGBM] [Info] Start training from score -2.396429\n[LightGBM] [Info] Start training from score -0.274878\n","output_type":"stream"},{"execution_count":227,"output_type":"execute_result","data":{"text/plain":"LGBMClassifier()","text/html":"<style>#sk-container-id-29 {color: black;background-color: white;}#sk-container-id-29 pre{padding: 0;}#sk-container-id-29 div.sk-toggleable {background-color: white;}#sk-container-id-29 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-29 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-29 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-29 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-29 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-29 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-29 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-29 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-29 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-29 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-29 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-29 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-29 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-29 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-29 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-29 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-29 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-29 div.sk-item {position: relative;z-index: 1;}#sk-container-id-29 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-29 div.sk-item::before, #sk-container-id-29 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-29 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-29 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-29 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-29 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-29 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-29 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-29 div.sk-label-container {text-align: center;}#sk-container-id-29 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-29 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-29\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LGBMClassifier()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-33\" type=\"checkbox\" checked><label for=\"sk-estimator-id-33\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LGBMClassifier</label><div class=\"sk-toggleable__content\"><pre>LGBMClassifier()</pre></div></div></div></div></div>"},"metadata":{}}]},{"cell_type":"code","source":"lgbm_pred = lgbm.predict(X_test)\nprint(accuracy_score(y_test,lgbm_pred))","metadata":{"execution":{"iopub.status.busy":"2024-04-10T11:21:48.128933Z","iopub.execute_input":"2024-04-10T11:21:48.129395Z","iopub.status.idle":"2024-04-10T11:21:48.267220Z","shell.execute_reply.started":"2024-04-10T11:21:48.129367Z","shell.execute_reply":"2024-04-10T11:21:48.266413Z"},"trusted":true},"execution_count":228,"outputs":[{"name":"stdout","text":"0.7741935483870968\n","output_type":"stream"}]},{"cell_type":"markdown","source":"### Accuracy found 0.771","metadata":{}},{"cell_type":"markdown","source":"### Hyperparameter Tuning of LightGBM model","metadata":{}},{"cell_type":"code","source":"param_grid = {\n    'n_estimators': [100, 200, 300],\n    'learning_rate': [0.05, 0.1, 0.2],\n    'max_depth': [3, 5, 7],\n    # Add more parameters as needed\n}","metadata":{"execution":{"iopub.status.busy":"2024-04-10T11:21:48.268512Z","iopub.execute_input":"2024-04-10T11:21:48.269057Z","iopub.status.idle":"2024-04-10T11:21:48.273635Z","shell.execute_reply.started":"2024-04-10T11:21:48.269026Z","shell.execute_reply":"2024-04-10T11:21:48.272712Z"},"trusted":true},"execution_count":229,"outputs":[]},{"cell_type":"code","source":"# grid_search = GridSearchCV(LGBMClassifier(), param_grid, cv=3)\n# grid_search.fit(X_train, y_train)","metadata":{"execution":{"iopub.status.busy":"2024-04-10T11:21:48.274850Z","iopub.execute_input":"2024-04-10T11:21:48.275317Z","iopub.status.idle":"2024-04-10T11:21:48.287023Z","shell.execute_reply.started":"2024-04-10T11:21:48.275289Z","shell.execute_reply":"2024-04-10T11:21:48.286021Z"},"trusted":true},"execution_count":230,"outputs":[]},{"cell_type":"code","source":"# best_params = grid_search.best_params_\n# # # {'learning_rate': 0.2, 'max_depth': 7, 'n_estimators': 300}\n# best_lgb_classifier = LGBMClassifier(learning_rate=0.2,max_depth=7,n_estimators=300)\n# best_lgb_classifier.fit(X_train, y_train)","metadata":{"execution":{"iopub.status.busy":"2024-04-10T11:21:48.288304Z","iopub.execute_input":"2024-04-10T11:21:48.288840Z","iopub.status.idle":"2024-04-10T11:21:48.300496Z","shell.execute_reply.started":"2024-04-10T11:21:48.288809Z","shell.execute_reply":"2024-04-10T11:21:48.299416Z"},"trusted":true},"execution_count":231,"outputs":[]},{"cell_type":"code","source":"# best_pred = best_lgb_classifier.predict(X_test)\n# print(accuracy_score(y_test,best_pred))","metadata":{"execution":{"iopub.status.busy":"2024-04-10T11:21:48.301845Z","iopub.execute_input":"2024-04-10T11:21:48.302379Z","iopub.status.idle":"2024-04-10T11:21:48.312087Z","shell.execute_reply.started":"2024-04-10T11:21:48.302348Z","shell.execute_reply":"2024-04-10T11:21:48.310768Z"},"trusted":true},"execution_count":232,"outputs":[]},{"cell_type":"markdown","source":"### Accuracy found 0.773","metadata":{}},{"cell_type":"markdown","source":"### After comparing 11 different models, the best model with great accuracy seems to be the fine tuned Multilayer Perceptron.\n","metadata":{}},{"cell_type":"markdown","source":"### Hence this will be the model used to make predictions on the given test set.","metadata":{}},{"cell_type":"markdown","source":"# Preprocessing the Test set","metadata":{}},{"cell_type":"code","source":"test.head(5)","metadata":{"execution":{"iopub.status.busy":"2024-04-10T11:21:48.313704Z","iopub.execute_input":"2024-04-10T11:21:48.314081Z","iopub.status.idle":"2024-04-10T11:21:48.335441Z","shell.execute_reply.started":"2024-04-10T11:21:48.314050Z","shell.execute_reply":"2024-04-10T11:21:48.334298Z"},"trusted":true},"execution_count":233,"outputs":[{"execution_count":233,"output_type":"execute_result","data":{"text/plain":"    ID  RecipeNumber  RecipeCode                    RecipeName  \\\n0   86            45       41384  Black Bean ‘n’ Pumpkin Chili   \n1  102            53        3143                  Pumpkin Bars   \n2  156            53        3143                  Pumpkin Bars   \n3   18            89        1324           Porcupine Meatballs   \n4   27            70       32264       Easy Chicken Enchiladas   \n\n                    CommentID                         UserID  \\\n0  sp_aUSaElGf_41384_c_341929  u_1oKc4U6bh65cEli8Z8eTIf98Vpr   \n1   sp_aUSaElGf_3143_c_274545  u_1oKW5seFLQMSwAeOfBVmwJizy5D   \n2   sp_aUSaElGf_3143_c_398512  u_1oKZ6GUIAIol8xe6oEI7t1Mpxdz   \n3   sp_aUSaElGf_1324_c_431662  u_1oKWCP33NVk4Osfpu4VJuIckEF0   \n4  sp_aUSaElGf_32264_c_423935  u_1oKVhIJMuUlrSCVkbO1jheVTol8   \n\n              UserName  UserReputation  CreationTimestamp  ReplyCount  \\\n0            kalloween               1         1622718043           0   \n1     chocolate desert               1         1622717685           0   \n2           Vantreesta               1         1622718307           0   \n3  Roberta L.Beauchamp               1         1622648872           0   \n4           fhquilting               1         1622718460           0   \n\n   ThumbsUpCount  ThumbsDownCount  BestScore  \\\n0              0                0        100   \n1              0                1        100   \n2              0                0        100   \n3              4                3        212   \n4              0                1        100   \n\n                                       Recipe_Review  \n0  This was so good!!  The pumpkin was perfect as...  \n1  So good!   Could not stop eating them, so bad....  \n2           I use a small ladle to fill muffin cups.  \n3  I made this and followed the instructions as d...  \n4  Very Good!  I used corn tortillas.  Used fresh...  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ID</th>\n      <th>RecipeNumber</th>\n      <th>RecipeCode</th>\n      <th>RecipeName</th>\n      <th>CommentID</th>\n      <th>UserID</th>\n      <th>UserName</th>\n      <th>UserReputation</th>\n      <th>CreationTimestamp</th>\n      <th>ReplyCount</th>\n      <th>ThumbsUpCount</th>\n      <th>ThumbsDownCount</th>\n      <th>BestScore</th>\n      <th>Recipe_Review</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>86</td>\n      <td>45</td>\n      <td>41384</td>\n      <td>Black Bean ‘n’ Pumpkin Chili</td>\n      <td>sp_aUSaElGf_41384_c_341929</td>\n      <td>u_1oKc4U6bh65cEli8Z8eTIf98Vpr</td>\n      <td>kalloween</td>\n      <td>1</td>\n      <td>1622718043</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>100</td>\n      <td>This was so good!!  The pumpkin was perfect as...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>102</td>\n      <td>53</td>\n      <td>3143</td>\n      <td>Pumpkin Bars</td>\n      <td>sp_aUSaElGf_3143_c_274545</td>\n      <td>u_1oKW5seFLQMSwAeOfBVmwJizy5D</td>\n      <td>chocolate desert</td>\n      <td>1</td>\n      <td>1622717685</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>100</td>\n      <td>So good!   Could not stop eating them, so bad....</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>156</td>\n      <td>53</td>\n      <td>3143</td>\n      <td>Pumpkin Bars</td>\n      <td>sp_aUSaElGf_3143_c_398512</td>\n      <td>u_1oKZ6GUIAIol8xe6oEI7t1Mpxdz</td>\n      <td>Vantreesta</td>\n      <td>1</td>\n      <td>1622718307</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>100</td>\n      <td>I use a small ladle to fill muffin cups.</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>18</td>\n      <td>89</td>\n      <td>1324</td>\n      <td>Porcupine Meatballs</td>\n      <td>sp_aUSaElGf_1324_c_431662</td>\n      <td>u_1oKWCP33NVk4Osfpu4VJuIckEF0</td>\n      <td>Roberta L.Beauchamp</td>\n      <td>1</td>\n      <td>1622648872</td>\n      <td>0</td>\n      <td>4</td>\n      <td>3</td>\n      <td>212</td>\n      <td>I made this and followed the instructions as d...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>27</td>\n      <td>70</td>\n      <td>32264</td>\n      <td>Easy Chicken Enchiladas</td>\n      <td>sp_aUSaElGf_32264_c_423935</td>\n      <td>u_1oKVhIJMuUlrSCVkbO1jheVTol8</td>\n      <td>fhquilting</td>\n      <td>1</td>\n      <td>1622718460</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>100</td>\n      <td>Very Good!  I used corn tortillas.  Used fresh...</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"X_valid=test.iloc[:,[1,7,8,9,10,11,12,13]]\nprint(X_valid.head(5))","metadata":{"execution":{"iopub.status.busy":"2024-04-10T11:21:48.336735Z","iopub.execute_input":"2024-04-10T11:21:48.337866Z","iopub.status.idle":"2024-04-10T11:21:48.350635Z","shell.execute_reply.started":"2024-04-10T11:21:48.337831Z","shell.execute_reply":"2024-04-10T11:21:48.349746Z"},"trusted":true},"execution_count":234,"outputs":[{"name":"stdout","text":"   RecipeNumber  UserReputation  CreationTimestamp  ReplyCount  ThumbsUpCount  \\\n0            45               1         1622718043           0              0   \n1            53               1         1622717685           0              0   \n2            53               1         1622718307           0              0   \n3            89               1         1622648872           0              4   \n4            70               1         1622718460           0              0   \n\n   ThumbsDownCount  BestScore  \\\n0                0        100   \n1                1        100   \n2                0        100   \n3                3        212   \n4                1        100   \n\n                                       Recipe_Review  \n0  This was so good!!  The pumpkin was perfect as...  \n1  So good!   Could not stop eating them, so bad....  \n2           I use a small ladle to fill muffin cups.  \n3  I made this and followed the instructions as d...  \n4  Very Good!  I used corn tortillas.  Used fresh...  \n","output_type":"stream"}]},{"cell_type":"code","source":"test_encoded=transform.transform(X_valid)","metadata":{"execution":{"iopub.status.busy":"2024-04-10T11:21:48.352053Z","iopub.execute_input":"2024-04-10T11:21:48.352615Z","iopub.status.idle":"2024-04-10T11:21:48.371532Z","shell.execute_reply.started":"2024-04-10T11:21:48.352584Z","shell.execute_reply":"2024-04-10T11:21:48.370482Z"},"trusted":true},"execution_count":235,"outputs":[]},{"cell_type":"code","source":"test_encoded=test_encoded.toarray()\nprint(test_encoded.shape,type(test_encoded))","metadata":{"execution":{"iopub.status.busy":"2024-04-10T11:21:48.373330Z","iopub.execute_input":"2024-04-10T11:21:48.374065Z","iopub.status.idle":"2024-04-10T11:21:48.380170Z","shell.execute_reply.started":"2024-04-10T11:21:48.374029Z","shell.execute_reply":"2024-04-10T11:21:48.379236Z"},"trusted":true},"execution_count":236,"outputs":[{"name":"stdout","text":"(4546, 106) <class 'numpy.ndarray'>\n","output_type":"stream"}]},{"cell_type":"code","source":"sample_test=text_pipeline.transform(X_valid['Recipe_Review'])","metadata":{"execution":{"iopub.status.busy":"2024-04-10T11:21:48.381544Z","iopub.execute_input":"2024-04-10T11:21:48.382143Z","iopub.status.idle":"2024-04-10T11:21:48.856858Z","shell.execute_reply.started":"2024-04-10T11:21:48.382110Z","shell.execute_reply":"2024-04-10T11:21:48.855894Z"},"trusted":true},"execution_count":237,"outputs":[]},{"cell_type":"code","source":"print(sample_test.shape)","metadata":{"execution":{"iopub.status.busy":"2024-04-10T11:21:48.858428Z","iopub.execute_input":"2024-04-10T11:21:48.859021Z","iopub.status.idle":"2024-04-10T11:21:48.864354Z","shell.execute_reply.started":"2024-04-10T11:21:48.858989Z","shell.execute_reply":"2024-04-10T11:21:48.863066Z"},"trusted":true},"execution_count":238,"outputs":[{"name":"stdout","text":"(4546, 10194)\n","output_type":"stream"}]},{"cell_type":"code","source":"final_test = np.concatenate((test_encoded,sample_test),1)\nprint(final_test.shape)","metadata":{"execution":{"iopub.status.busy":"2024-04-10T11:21:48.867920Z","iopub.execute_input":"2024-04-10T11:21:48.868247Z","iopub.status.idle":"2024-04-10T11:21:49.091570Z","shell.execute_reply.started":"2024-04-10T11:21:48.868218Z","shell.execute_reply":"2024-04-10T11:21:49.090513Z"},"trusted":true},"execution_count":239,"outputs":[{"name":"stdout","text":"(4546, 10300)\n","output_type":"stream"}]},{"cell_type":"code","source":"final_pca_test=pca.transform(final_test)","metadata":{"execution":{"iopub.status.busy":"2024-04-10T11:21:49.093029Z","iopub.execute_input":"2024-04-10T11:21:49.093932Z","iopub.status.idle":"2024-04-10T11:21:50.079197Z","shell.execute_reply.started":"2024-04-10T11:21:49.093901Z","shell.execute_reply":"2024-04-10T11:21:50.077646Z"},"trusted":true},"execution_count":240,"outputs":[]},{"cell_type":"code","source":"final_pca_test.shape","metadata":{"execution":{"iopub.status.busy":"2024-04-10T11:21:50.081125Z","iopub.execute_input":"2024-04-10T11:21:50.082389Z","iopub.status.idle":"2024-04-10T11:21:50.091106Z","shell.execute_reply.started":"2024-04-10T11:21:50.082332Z","shell.execute_reply":"2024-04-10T11:21:50.089763Z"},"trusted":true},"execution_count":241,"outputs":[{"execution_count":241,"output_type":"execute_result","data":{"text/plain":"(4546, 532)"},"metadata":{}}]},{"cell_type":"markdown","source":"# Making the Submission","metadata":{}},{"cell_type":"code","source":"y_pred=best_model.predict(final_pca_test)\n\nsubmission = pd.DataFrame({\"ID\": range(1,4547), \n                           \"total_amount\": y_pred}) \n\nsubmission.to_csv('submission.csv',index=False) ","metadata":{"execution":{"iopub.status.busy":"2024-04-10T11:21:50.093511Z","iopub.execute_input":"2024-04-10T11:21:50.094694Z","iopub.status.idle":"2024-04-10T11:21:50.178505Z","shell.execute_reply.started":"2024-04-10T11:21:50.094611Z","shell.execute_reply":"2024-04-10T11:21:50.176951Z"},"trusted":true},"execution_count":242,"outputs":[]}]}